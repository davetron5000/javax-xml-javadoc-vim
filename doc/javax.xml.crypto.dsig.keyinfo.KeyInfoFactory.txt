*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory* *KeyInfoFactory* A factory for creatingKeyInfoobjects from scratch or for
 unmars

public abstract class KeyInfoFactory
  extends    |java.lang.Object|

|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Description|
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Fields|
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Constructors|
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Methods|

================================================================================================================================

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Constructors*
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory()|Default constructor, for invocation by subclasses.

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Methods*
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance()|Returns a KeyInfoFactory that supports the  default XML processing 
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String)|Returns a KeyInfoFactory that supports the  specified XML pro
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,Provider)|Returns a KeyInfoFactory that supports the  requeste
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,String)|Returns a KeyInfoFactory that supports the  requested 
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType()|Returns the type of the XML processing mechanism and represent
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider()|Returns the provider of this KeyInfoFactory.
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer()|Returns a reference to the URIDereferencer that is used by  
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(String)|Indicates whether a specified feature is supported.
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List)|Creates a KeyInfo containing the specified list of  key informat
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List,String)|Creates a KeyInfo containing the specified list of key  i
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(String)|Creates a KeyName from the specified name.
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(PublicKey)|Creates a KeyValue from the specified public key.
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[])|Creates a PGPData from the specified PGP public key  identifie
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],byte[],List)|Creates a PGPData from the specified PGP public ke
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],List)|Creates a PGPData from the specified PGP key material  pa
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String)|Creates a RetrievalMethod from the specified URI.
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String,String,List)|Creates a RetrievalMethod from the specifi
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(List)|Creates a X509Data containing the specified list of  X.509 cont
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(String,BigInteger)|Creates an X509IssuerSerial from the speci
|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo(XMLStructure)|Unmarshals a new KeyInfo instance from a   mechani

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory_Description*

A factory for creating (|javax.xml.crypto.dsig.keyinfo.KeyInfo|) objects from scratch or for unmarshalling a KeyInfo object 
from a corresponding XML representation. 

Each instance of KeyInfoFactory supports a specific XML mechanism type. To create a KeyInfoFactory, call one of the static 
getInstance(|javax.xml.crypto.dsig.keyinfo.KeyInfoFactory|) methods, passing in the XML mechanism type desired, for example: 

KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM"); 

The objects that this factory produces will be based on DOM and abide by the DOM interoperability requirements as defined in 
the 

DOM Mechanism Requirements section of the API overview. See the 

Service Providers section of the API overview for a list of standard mechanism types. 

KeyInfoFactory implementations are registered and loaded using the (|java.security.Provider|) mechanism. For example, a service 
provider that supports the DOM mechanism would be specified in the Provider subclass as: 

put("KeyInfoFactory.DOM", "org.example.DOMKeyInfoFactory"); 

Also, the XMLStructures that are created by this factory may contain state specific to the KeyInfo and are not intended to be 
reusable. 

An implementation MUST minimally support the default mechanism type: DOM. 

Note that a caller must use the same KeyInfoFactory instance to create the XMLStructures of a particular KeyInfo object. The 
behavior is undefined if XMLStructures from different providers or different mechanism types are used together. 

Concurrent Access The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke 
the static methods defined in this class with no ill effects. 

However, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, 
threads that need to access a single KeyInfoFactory instance concurrently should synchronize amongst themselves and provide the 
necessary locking. Multiple threads each manipulating a different KeyInfoFactory instance need not synchronize. 



*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory()*

protected KeyInfoFactory()

Default constructor, for invocation by subclasses. 


*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance()*

public static |javax.xml.crypto.dsig.keyinfo.KeyInfoFactory| getInstance()

Returns a KeyInfoFactory that supports the default XML processing mechanism and representation type ("DOM"). 

This method uses the standard JCA provider lookup mechanism to locate and instantiate a KeyInfoFactory implementation of the 
default mechanism type. It traverses the list of registered security Providers, starting with the most preferred Provider. A 
new KeyInfoFactory object from the first Provider that supports the DOM mechanism is returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 



    Returns: a new KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String)*

public static |javax.xml.crypto.dsig.keyinfo.KeyInfoFactory| getInstance(java.lang.String mechanismType)

Returns a KeyInfoFactory that supports the specified XML processing mechanism and representation type (ex: "DOM"). 

This method uses the standard JCA provider lookup mechanism to locate and instantiate a KeyInfoFactory implementation of the 
desired mechanism type. It traverses the list of registered security Providers, starting with the most preferred Provider. A 
new KeyInfoFactory object from the first Provider that supports the specified mechanism is returned. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 


    mechanismType - the type of the XML processing mechanism and representation. See the Service Providers section of the API overview for a list 
       of standard mechanism types. 

    Returns: a new KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,Provider)*

public static |javax.xml.crypto.dsig.keyinfo.KeyInfoFactory| getInstance(
  java.lang.String mechanismType,
  java.security.Provider provider)

Returns a KeyInfoFactory that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied 
by the specified provider. Note that the specified Provider object does not have to be registered in the provider list. 


    mechanismType - the type of the XML processing mechanism and representation. See the Service Providers section of the API overview for a list 
       of standard mechanism types. 
    provider - the Provider object 

    Returns: a new KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getInstance(String,String)*

public static |javax.xml.crypto.dsig.keyinfo.KeyInfoFactory| getInstance(
  java.lang.String mechanismType,
  java.lang.String provider)
  throws |java.security.NoSuchProviderException|
         
Returns a KeyInfoFactory that supports the requested XML processing mechanism and representation type (ex: "DOM"), as supplied 
by the specified provider. The specified provider must be registered in the security provider list. 

Note that the list of registered providers may be retrieved via the Security.getProviders()(|java.security.Security|) method. 


    mechanismType - the type of the XML processing mechanism and representation. See the Service Providers section of the API overview for a list 
       of standard mechanism types. 
    provider - the string name of the provider 

    Returns: a new KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getMechanismType()*

public final |java.lang.String| getMechanismType()

Returns the type of the XML processing mechanism and representation supported by this KeyInfoFactory (ex: "DOM") 



    Returns: the XML processing mechanism type supported by this KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getProvider()*

public final |java.security.Provider| getProvider()

Returns the provider of this KeyInfoFactory. 



    Returns: the provider of this KeyInfoFactory 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.getURIDereferencer()*

public abstract |javax.xml.crypto.URIDereferencer| getURIDereferencer()

Returns a reference to the URIDereferencer that is used by default to dereference URIs in 
(|javax.xml.crypto.dsig.keyinfo.RetrievalMethod|) objects. 



    Returns: a reference to the default URIDereferencer 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.isFeatureSupported(String)*

public abstract boolean isFeatureSupported(java.lang.String feature)

Indicates whether a specified feature is supported. 


    feature - the feature name (as an absolute URI) 

    Returns: true if the specified feature is supported, false otherwise 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List)*

public abstract |javax.xml.crypto.dsig.keyinfo.KeyInfo| newKeyInfo(java.util.List content)

Creates a KeyInfo containing the specified list of key information types. 


    content - a list of one or more {@link XMLStructure}s representing key information types. The list is defensively copied to protect 
       against subsequent modification. 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyInfo(List,String)*

public abstract |javax.xml.crypto.dsig.keyinfo.KeyInfo| newKeyInfo(
  java.util.List content,
  java.lang.String id)

Creates a KeyInfo containing the specified list of key information types and optional id. The id parameter represents the value 
of an XML ID attribute and is useful for referencing the KeyInfo from other XML structures. 


    content - a list of one or more {@link XMLStructure}s representing key information types. The list is defensively copied to protect 
       against subsequent modification. 
    id - the value of an XML ID (may be null) 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyName(String)*

public abstract |javax.xml.crypto.dsig.keyinfo.KeyName| newKeyName(java.lang.String name)

Creates a KeyName from the specified name. 


    name - the name that identifies the key 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newKeyValue(PublicKey)*

public abstract |javax.xml.crypto.dsig.keyinfo.KeyValue| newKeyValue(java.security.PublicKey key)
  throws |java.security.KeyException|
         
Creates a KeyValue from the specified public key. 


    key - the public key 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[])*

public abstract |javax.xml.crypto.dsig.keyinfo.PGPData| newPGPData(byte[] keyId)

Creates a PGPData from the specified PGP public key identifier. 


    keyId - a PGP public key identifier as defined in RFC 2440, section 11.2. The array is cloned to protect against subsequent 
       modification. 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],byte[],List)*

public abstract |javax.xml.crypto.dsig.keyinfo.PGPData| newPGPData(
  byte[] keyId,
  byte[] keyPacket,
  java.util.List other)

Creates a PGPData from the specified PGP public key identifier, and optional key material packet and list of external elements. 


    keyId - a PGP public key identifier as defined in RFC 2440, section 11.2. The array is cloned to protect against subsequent 
       modification. 
    keyPacket - a PGP key material packet as defined in RFC 2440, section 5.5. The array is cloned to protect against subsequent modification. 
       May be null. 
    other - a list of {@link XMLStructure}s representing elements from an external namespace. The list is defensively copied to protect 
       against subsequent modification. May be null or empty. 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newPGPData(byte[],List)*

public abstract |javax.xml.crypto.dsig.keyinfo.PGPData| newPGPData(
  byte[] keyPacket,
  java.util.List other)

Creates a PGPData from the specified PGP key material packet and optional list of external elements. 


    keyPacket - a PGP key material packet as defined in RFC 2440, section 5.5. The array is cloned to protect against subsequent modification. 
    other - a list of {@link XMLStructure}s representing elements from an external namespace. The list is defensively copied to protect 
       against subsequent modification. May be null or empty. 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String)*

public abstract |javax.xml.crypto.dsig.keyinfo.RetrievalMethod| newRetrievalMethod(java.lang.String uri)

Creates a RetrievalMethod from the specified URI. 


    uri - the URI that identifies the KeyInfo information to be retrieved 

    Returns: a RetrievalMethod 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newRetrievalMethod(String,String,List)*

public abstract |javax.xml.crypto.dsig.keyinfo.RetrievalMethod| newRetrievalMethod(
  java.lang.String uri,
  java.lang.String type,
  java.util.List transforms)

Creates a RetrievalMethod from the specified parameters. 


    uri - the URI that identifies the KeyInfo information to be retrieved 
    type - a URI that identifies the type of KeyInfo information to be retrieved (may be null) 
    transforms - a list of {@link Transform}s. The list is defensively copied to protect against subsequent modification. May be null or empty. 

    Returns: a RetrievalMethod 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509Data(List)*

public abstract |javax.xml.crypto.dsig.keyinfo.X509Data| newX509Data(java.util.List content)

Creates a X509Data containing the specified list of X.509 content. 


    content - a list of one or more X.509 content types. Valid types are {@link String} (subject names), byte[] (subject key ids), {@link 
       java.security.cert.X509Certificate}, {@link X509CRL}, or {@link XMLStructure} ({@link X509IssuerSerial} objects or 
       elements from an external namespace). Subject names are distinguished names in RFC 2253 String format. Implementations 
       MUST support the attribute type keywords defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC and UID). Implementations 
       MAY support additional keywords. The list is defensively copied to protect against subsequent modification. 

    Returns: 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.newX509IssuerSerial(String,BigInteger)*

public abstract |javax.xml.crypto.dsig.keyinfo.X509IssuerSerial| newX509IssuerSerial(
  java.lang.String issuerName,
  java.math.BigInteger serialNumber)

Creates an X509IssuerSerial from the specified X.500 issuer distinguished name and serial number. 


    issuerName - the issuer's distinguished name in RFC 2253 String format. Implementations MUST support the attribute type keywords defined in 
       RFC 2253 (CN, L, ST, O, OU, C, STREET, DC and UID). Implementations MAY support additional keywords. 
    serialNumber - the serial number 

    Returns: an X509IssuerSerial 

*javax.xml.crypto.dsig.keyinfo.KeyInfoFactory.unmarshalKeyInfo(XMLStructure)*

public abstract |javax.xml.crypto.dsig.keyinfo.KeyInfo| unmarshalKeyInfo(javax.xml.crypto.XMLStructure xmlStructure)
  throws |javax.xml.crypto.MarshalException|
         
Unmarshals a new KeyInfo instance from a mechanism-specific XMLStructure (ex: (|javax.xml.crypto.dom.DOMStructure|) ) instance. 


    xmlStructure - a mechanism-specific XML structure from which to unmarshal the keyinfo from 

    Returns: 


