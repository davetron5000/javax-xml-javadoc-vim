*javax.xml.bind.annotation.XmlRootElement* *XmlRootElement* Maps a class or an enum type to an XML element.

public interface class XmlRootElement

  implements |java.lang.annotation.Annotation|

|javax.xml.bind.annotation.XmlRootElement_Description|
|javax.xml.bind.annotation.XmlRootElement_Fields|
|javax.xml.bind.annotation.XmlRootElement_Constructors|
|javax.xml.bind.annotation.XmlRootElement_Methods|

================================================================================================================================

*javax.xml.bind.annotation.XmlRootElement_Description*

Maps a class or an enum type to an XML element. 

Usage 

The XmlRootElement annotation can be used with the following program elements: 

a top level class an enum type 

See "Package Specification" in javax.xml.bind.package javadoc for additional common information. 

When a top level class or an enum type is annotated with the XmlRootElement annotation, then its value is represented as XML 
element in an XML document. 

This annotation can be used with the following annotations: (|javax.xml.bind.annotation.XmlType|) , 
(|javax.xml.bind.annotation.XmlEnum|) , (|javax.xml.bind.annotation.XmlAccessorType|) , 
(|javax.xml.bind.annotation.XmlAccessorOrder|) . 

Example 1: Associate an element with XML Schema type 

// Example: Code fragment XmlRootElement class Point { int x; int y; Point(int _x,int _y) {x=_x;y=_y;} } 



//Example: Code fragment corresponding to XML output marshal( new Point(3,5), System.out); 





3 5 



The annotation causes an global element declaration to be produced in the schema. The global element declaration is associated 
with the XML schema type to which the class is mapped. 















Example 2: Orthogonality to type inheritance 

An element declaration annotated on a type is not inherited by its derived types. The following example shows this. 

// Example: Code fragment XmlRootElement class Point3D extends Point { int z; Point3D(int _x,int _y,int _z) 
{super(_x,_y);z=_z;} } 

//Example: Code fragment corresponding to XML output * marshal( new Point3D(3,5,0), System.out ); 

<!-- Example: XML output --> <!-- The element name is point3D not point --> <point3D> <x>3</x> <y>5</y> <z>0</z> </point3D> 

<!-- Example: XML schema definition --> <xs:element name="point3D" type="point3D"/> <xs:complexType name="point3D"> 
<xs:complexContent> <xs:extension base="point"> <xs:sequence> <xs:element name="z" type="xs:int"/> </xs:sequence> 
</xs:extension> </xs:complexContent> </xs:complexType> 

Example 3: Associate a global element with XML Schema type to which the class is mapped. 

//Example: Code fragment XmlRootElement(name="PriceElement") public class USPrice { XmlElement public java.math.BigDecimal 
price; } 

<!-- Example: XML schema definition --> <xs:element name="PriceElement" type="USPrice"/> <xs:complexType name="USPrice"> 
<xs:sequence> <xs:element name="price" type="xs:decimal"/> </sequence> </xs:complexType> 



