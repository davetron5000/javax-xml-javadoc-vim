*javax.xml.bind.Marshaller* *Marshaller* 
 The Marshaller class is responsible for governing the process
 of serializing Java co

public interface interface Marshaller


|javax.xml.bind.Marshaller_Description|
|javax.xml.bind.Marshaller_Fields|
|javax.xml.bind.Marshaller_Constructors|
|javax.xml.bind.Marshaller_Methods|

================================================================================================================================

*javax.xml.bind.Marshaller_Fields*
|java.lang.String_javax.xml.bind.Marshaller.JAXB_ENCODING|
|java.lang.String_javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT|
|java.lang.String_javax.xml.bind.Marshaller.JAXB_FRAGMENT|
|java.lang.String_javax.xml.bind.Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION|
|java.lang.String_javax.xml.bind.Marshaller.JAXB_SCHEMA_LOCATION|

*javax.xml.bind.Marshaller_Methods*
|javax.xml.bind.Marshaller.getAdapter(Class<A>)|Gets the adapter associated with the specified type.
|javax.xml.bind.Marshaller.getAttachmentMarshaller()|
|javax.xml.bind.Marshaller.getEventHandler()|Return the current event handler or the default event handler if one  hasn't been 
|javax.xml.bind.Marshaller.getListener()|ReturnListenerregistered with thisMarshaller.
|javax.xml.bind.Marshaller.getNode(Object)|Get a DOM tree view of the content tree(Optional).
|javax.xml.bind.Marshaller.getProperty(String)|Get the particular property in the underlying implementation of   Marshaller.
|javax.xml.bind.Marshaller.getSchema()|Get the JAXP 1.3javax.xml.validation.Schema Schemaobject  being used to perform marshal-
|javax.xml.bind.Marshaller.marshal(Object,ContentHandler)|Marshal the content tree rooted at jaxbElement into SAX2 events.
|javax.xml.bind.Marshaller.marshal(Object,File)|Marshal the content tree rooted at jaxbElement into a file.
|javax.xml.bind.Marshaller.marshal(Object,Node)|Marshal the content tree rooted at jaxbElement into a DOM tree.
|javax.xml.bind.Marshaller.marshal(Object,OutputStream)|Marshal the content tree rooted at jaxbElement into an output stream.
|javax.xml.bind.Marshaller.marshal(Object,Result)|Marshal the content tree rooted at jaxbElement into the specified   javax.xml
|javax.xml.bind.Marshaller.marshal(Object,Writer)|Marshal the content tree rooted at jaxbElement into a Writer.
|javax.xml.bind.Marshaller.marshal(Object,XMLEventWriter)|Marshal the content tree rooted at jaxbElement into ajavax.xml.stream
|javax.xml.bind.Marshaller.marshal(Object,XMLStreamWriter)|Marshal the content tree rooted at jaxbElement into ajavax.xml.strea
|javax.xml.bind.Marshaller.setAdapter(Class<A>,A)|Associates a configured instance ofXmlAdapterwith this marshaller.
|javax.xml.bind.Marshaller.setAdapter(XmlAdapter)|Associates a configured instance ofXmlAdapterwith this marshaller.
|javax.xml.bind.Marshaller.setAttachmentMarshaller(AttachmentMarshaller)|Associate a context that enables binary data within an
|javax.xml.bind.Marshaller.setEventHandler(ValidationEventHandler)|Allow an application to register a validation event handler.
|javax.xml.bind.Marshaller.setListener(Marshaller.Listener)|Register marshal event callbackListenerwith thisMarshaller.
|javax.xml.bind.Marshaller.setProperty(String,Object)|Set the particular property in the underlying implementation of   Marshal
|javax.xml.bind.Marshaller.setSchema(Schema)|Specify the JAXP 1.3javax.xml.validation.Schema Schemaobject that should be used t

*javax.xml.bind.Marshaller_Description*

The Marshaller class is responsible for governing the process of serializing Java content trees back into XML data. It provides 
the basic marshalling methods: 

Assume the following setup code for all following code fragments: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); Object element = 
u.unmarshal( new File( "foo.xml" ) ); Marshaller m = jc.createMarshaller(); 



Marshalling to a File: 



OutputStream os = new FileOutputStream( "nosferatu.xml" ); m.marshal( element, os ); 



Marshalling to a SAX ContentHandler: 



// assume MyContentHandler instanceof ContentHandler m.marshal( element, new MyContentHandler() ); 



Marshalling to a DOM Node: 



DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setNamespaceAware(true); DocumentBuilder db = 
dbf.newDocumentBuilder(); Document doc = db.newDocument(); 

m.marshal( element, doc ); 



Marshalling to a java.io.OutputStream: 



m.marshal( element, System.out ); 



Marshalling to a java.io.Writer: 



m.marshal( element, new PrintWriter( System.out ) ); 



Marshalling to a javax.xml.transform.SAXResult: 



// assume MyContentHandler instanceof ContentHandler SAXResult result = new SAXResult( new MyContentHandler() ); 

m.marshal( element, result ); 



Marshalling to a javax.xml.transform.DOMResult: 



DOMResult result = new DOMResult(); 

m.marshal( element, result ); 



Marshalling to a javax.xml.transform.StreamResult: 



StreamResult result = new StreamResult( System.out ); 

m.marshal( element, result ); 



Marshalling to a javax.xml.stream.XMLStreamWriter: 



XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter( ... ); 

m.marshal( element, xmlStreamWriter ); 



Marshalling to a javax.xml.stream.XMLEventWriter: 



XMLEventWriter xmlEventWriter = XMLOutputFactory.newInstance().createXMLEventWriter( ... ); 

m.marshal( element, xmlEventWriter ); 





Marshalling content tree rooted by a JAXB element 

The first parameter of the overloaded Marshaller.marshal(java.lang.Object, ...) methods must be a JAXB element as computed by 
(|javax.xml.bind.JAXBIntrospector|) ; otherwise, a Marshaller.marshal method must throw a (|javax.xml.bind.MarshalException|) . 
There exist two mechanisms to enable marshalling an instance that is not a JAXB element. One method is to wrap the instance as 
a value of a (|javax.xml.bind.JAXBElement|) , and pass the wrapper element as the first parameter to a Marshaller.marshal 
method. For java to schema binding, it is also possible to simply annotate the instance's class with 
(|javax.xml.bind.annotation.XmlRootElement|) . 

Encoding 

By default, the Marshaller will use UTF-8 encoding when generating XML data to a java.io.OutputStream, or a java.io.Writer. Use 
the setProperty(|javax.xml.bind.Marshaller|) API to change the output encoding used during these marshal operations. Client 
applications are expected to supply a valid character encoding name as defined in the W3C XML 1.0 Recommendation and supported 
by your 

Java Platform. 



Validation and Well-Formedness 

Client applications are not required to validate the Java content tree prior to calling any of the marshal API's. Furthermore, 
there is no requirement that the Java content tree be valid with respect to its original schema in order to marshal it back 
into XML data. Different JAXB Providers will support marshalling invalid Java content trees at varying levels, however all JAXB 
Providers must be able to marshal a valid content tree back to XML data. A JAXB Provider must throw a MarshalException when it 
is unable to complete the marshal operation due to invalid content. Some JAXB Providers will fully allow marshalling invalid 
content, others will fail on the first validation error. 

Even when schema validation is not explictly enabled for the marshal operation, it is possible that certain types of validation 
events will be detected during the operation. Validation events will be reported to the registered event handler. If the client 
application has not registered an event handler prior to invoking one of the marshal API's, then events will be delivered to a 
default event handler which will terminate the marshal operation after encountering the first error or fatal error. Note that 
for JAXB 2.0 and later versions, (|javax.xml.bind.helpers.DefaultValidationEventHandler|) is no longer used. 





Supported Properties 

All JAXB Providers are required to support the following set of properties. Some providers may support additional properties. 

jaxb.encoding - value must be a java.lang.String The output encoding to use when marshalling the XML data. The Marshaller will 
use "UTF-8" by default if this property is not specified. jaxb.formatted.output - value must be a java.lang.Boolean This 
property controls whether or not the Marshaller will format the resulting XML data with line breaks and indentation. A true 
value for this property indicates human readable indented xml data, while a false value indicates unformatted xml data. The 
Marshaller will default to false (unformatted) if this property is not specified. jaxb.schemaLocation - value must be a 
java.lang.String This property allows the client application to specify an xsi:schemaLocation attribute in the generated XML 
data. The format of the schemaLocation attribute value is discussed in an easy to understand, non-normative form in Section 5.6 
of the W3C XML Schema Part 0: Primer and specified in 

Section 2.6 of the W3C XML Schema Part 1: Structures. jaxb.noNamespaceSchemaLocation - value must be a java.lang.String This 
property allows the client application to specify an xsi:noNamespaceSchemaLocation attribute in the generated XML data. The 
format of the schemaLocation attribute value is discussed in an easy to understand, non-normative form in Section 5.6 of the 
W3C XML Schema Part 0: Primer and specified in 

Section 2.6 of the W3C XML Schema Part 1: Structures. jaxb.fragment - value must be a java.lang.Boolean This property 
determines whether or not document level events will be generated by the Marshaller. If the property is not specified, the 
default is false. This property has different implications depending on which marshal api you are using - when this property is 
set to true: 

marshal(Object,ContentHandler)(|javax.xml.bind.Marshaller|) - the Marshaller won't invoke (|org.xml.sax.ContentHandler|) and 
(|org.xml.sax.ContentHandler|) . marshal(Object,Node)(|javax.xml.bind.Marshaller|) - the property has no effect on this API. 
marshal(Object,OutputStream)(|javax.xml.bind.Marshaller|) - the Marshaller won't generate an xml declaration. 
marshal(Object,Writer)(|javax.xml.bind.Marshaller|) - the Marshaller won't generate an xml declaration. 
marshal(Object,Result)(|javax.xml.bind.Marshaller|) - depends on the kind of Result object, see semantics for Node, 
ContentHandler, and Stream APIs marshal(Object,XMLEventWriter)(|javax.xml.bind.Marshaller|) - the Marshaller will not generate 
(|javax.xml.stream.events.XMLEvent|) and (|javax.xml.stream.events.XMLEvent|) events. 
marshal(Object,XMLStreamWriter)(|javax.xml.bind.Marshaller|) - the Marshaller will not generate 
(|javax.xml.stream.events.XMLEvent|) and (|javax.xml.stream.events.XMLEvent|) events. 







Marshal Event Callbacks 

"The (|javax.xml.bind.Marshaller|) provides two styles of callback mechanisms that allow application specific processing during 
key points in the unmarshalling process. In 'class defined' event callbacks, application specific code placed in JAXB mapped 
classes is triggered during marshalling. 'External listeners' allow for centralized processing of marshal events in one 
callback method rather than by type event callbacks. 

Class defined event callback methods allow any JAXB mapped class to specify its own specific callback methods by defining 
methods with the following method signatures: 



// Invoked by Marshaller after it has created an instance of this object. boolean beforeMarshal(Marshaller); 

// Invoked by Marshaller after it has marshalled all properties of this object. void afterMmarshal(Marshaller); 

The class defined event callback methods should be used when the callback method requires access to non-public methods and/or 
fields of the class. 

The external listener callback mechanism enables the registration of a (|javax.xml.bind.Marshaller.Listener|) instance with a 
(|javax.xml.bind.Marshaller|) . The external listener receives all callback events, allowing for more centralized processing 
than per class defined callback methods. 

The 'class defined' and external listener event callback methods are independent of each other, both can be called for one 
event. The invocation ordering when both listener callback methods exist is defined in (|javax.xml.bind.Marshaller.Listener|) 
and (|javax.xml.bind.Marshaller.Listener|) . 

An event callback method throwing an exception terminates the current marshal process. 



*java.lang.String_javax.xml.bind.Marshaller.JAXB_ENCODING*

The name of the property used to specify the output encoding in the marshalled XML data. 


*java.lang.String_javax.xml.bind.Marshaller.JAXB_FORMATTED_OUTPUT*

The name of the property used to specify whether or not the marshalled XML data is formatted with linefeeds and indentation. 


*java.lang.String_javax.xml.bind.Marshaller.JAXB_FRAGMENT*

The name of the property used to specify whether or not the marshaller will generate document level events (ie calling 
startDocument or endDocument). 


*java.lang.String_javax.xml.bind.Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION*

The name of the property used to specify the xsi:noNamespaceSchemaLocation attribute value to place in the marshalled XML 
output. 


*java.lang.String_javax.xml.bind.Marshaller.JAXB_SCHEMA_LOCATION*

The name of the property used to specify the xsi:schemaLocation attribute value to place in the marshalled XML output. 



*javax.xml.bind.Marshaller.getAdapter(Class<A>)*

public |A| getAdapter(java.lang.Class<A> type)

Gets the adapter associated with the specified type. 

This is the reverse operation of the (|javax.xml.bind.Marshaller|) method. 



*javax.xml.bind.Marshaller.getAttachmentMarshaller()*

public |javax.xml.bind.attachment.AttachmentMarshaller| getAttachmentMarshaller()





*javax.xml.bind.Marshaller.getEventHandler()*

public |javax.xml.bind.ValidationEventHandler| getEventHandler()
  throws |javax.xml.bind.JAXBException|
         
Return the current event handler or the default event handler if one hasn't been set. 



    Returns: the current ValidationEventHandler or the default event handler if it hasn't been set 

*javax.xml.bind.Marshaller.getListener()*

public |javax.xml.bind.Marshaller.Listener| getListener()

Return (|javax.xml.bind.Marshaller.Listener|) registered with this (|javax.xml.bind.Marshaller|) . 



    Returns: registered {@link Listener} or null if no Listener is registered with this Marshaller. 

*javax.xml.bind.Marshaller.getNode(Object)*

public |org.w3c.dom.Node| getNode(java.lang.Object contentTree)
  throws |javax.xml.bind.JAXBException|
         
Get a DOM tree view of the content tree(Optional). 

If the returned DOM tree is updated, these changes are also visible in the content tree. Use (|javax.xml.bind.Marshaller|) to 
force a deep copy of the content tree to a DOM representation. 


    contentTree - - JAXB Java representation of XML content 

    Returns: the DOM tree view of the contentTree 

*javax.xml.bind.Marshaller.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)
  throws |javax.xml.bind.PropertyException|
         
Get the particular property in the underlying implementation of Marshaller. This method can only be used to get one of the 
standard JAXB defined properties above or a provider specific property. Attempting to get an undefined property will result in 
a PropertyException being thrown. See Supported Properties. 


    name - the name of the property to retrieve 

    Returns: the value of the requested property 

*javax.xml.bind.Marshaller.getSchema()*

public |javax.xml.validation.Schema| getSchema()

Get the JAXP 1.3 Schema(|javax.xml.validation.Schema|) object being used to perform marshal-time validation. If there is no 
Schema set on the marshaller, then this method will return null indicating that marshal-time validation will not be performed. 



    Returns: the Schema object being used to perform marshal-time validation or null if not present. 

*javax.xml.bind.Marshaller.marshal(Object,ContentHandler)*

public void marshal(
  java.lang.Object jaxbElement,
  org.xml.sax.ContentHandler handler)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into SAX2 events. 


    jaxbElement - The root of content tree to be marshalled. 
    handler - XML will be sent to this handler as SAX2 events. 

*javax.xml.bind.Marshaller.marshal(Object,File)*

public void marshal(
  java.lang.Object jaxbElement,
  java.io.File output)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into a file. 


    jaxbElement - The root of content tree to be marshalled. 
    output - File to be written. If this file already exists, it will be overwritten. 

*javax.xml.bind.Marshaller.marshal(Object,Node)*

public void marshal(
  java.lang.Object jaxbElement,
  org.w3c.dom.Node node)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into a DOM tree. 


    jaxbElement - The content tree to be marshalled. 
    node - DOM nodes will be added as children of this node. This parameter must be a Node that accepts children ({@link 
       org.w3c.dom.Document}, {@link org.w3c.dom.DocumentFragment}, or {@link org.w3c.dom.Element}) 

*javax.xml.bind.Marshaller.marshal(Object,OutputStream)*

public void marshal(
  java.lang.Object jaxbElement,
  java.io.OutputStream os)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into an output stream. 


    jaxbElement - The root of content tree to be marshalled. 
    os - XML will be added to this stream. 

*javax.xml.bind.Marshaller.marshal(Object,Result)*

public void marshal(
  java.lang.Object jaxbElement,
  javax.xml.transform.Result result)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into the specified javax.xml.transform.Result. 

All JAXB Providers must at least support (|javax.xml.transform.dom.DOMResult|) , (|javax.xml.transform.sax.SAXResult|) , and 
(|javax.xml.transform.stream.StreamResult|) . It can support other derived classes of Result as well. 


    jaxbElement - The root of content tree to be marshalled. 
    result - XML will be sent to this Result 

*javax.xml.bind.Marshaller.marshal(Object,Writer)*

public void marshal(
  java.lang.Object jaxbElement,
  java.io.Writer writer)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into a Writer. 


    jaxbElement - The root of content tree to be marshalled. 
    writer - XML will be sent to this writer. 

*javax.xml.bind.Marshaller.marshal(Object,XMLEventWriter)*

public void marshal(
  java.lang.Object jaxbElement,
  javax.xml.stream.XMLEventWriter writer)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into a (|javax.xml.stream.XMLEventWriter|) . 


    jaxbElement - The content tree rooted at jaxbElement to be marshalled. 
    writer - XML will be sent to this writer. 

*javax.xml.bind.Marshaller.marshal(Object,XMLStreamWriter)*

public void marshal(
  java.lang.Object jaxbElement,
  javax.xml.stream.XMLStreamWriter writer)
  throws |javax.xml.bind.JAXBException|
         
Marshal the content tree rooted at jaxbElement into a (|javax.xml.stream.XMLStreamWriter|) . 


    jaxbElement - The content tree to be marshalled. 
    writer - XML will be sent to this writer. 

*javax.xml.bind.Marshaller.setAdapter(Class<A>,A)*

public void setAdapter(
  java.lang.Class<A> type,
  A extends javax.xml.bind.annotation.adapters.XmlAdapter adapter)

Associates a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) with this marshaller. 

Every marshaller internally maintains a (|java.util.Map|) < (|java.lang.Class|) , 
(|javax.xml.bind.annotation.adapters.XmlAdapter|) >, which it uses for marshalling classes whose fields/methods are annotated 
with (|javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter|) . 

This method allows applications to use a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) . When an 
instance of an adapter is not given, a marshaller will create one by invoking its default constructor. 


    type - The type of the adapter. The specified instance will be used when {@link 
       javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter#value()} refers to this type. 
    adapter - The instance of the adapter to be used. If null, it will un-register the current adapter set for this type. 

*javax.xml.bind.Marshaller.setAdapter(XmlAdapter)*

public void setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter adapter)

Associates a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) with this marshaller. 

This is a convenience method that invokes setAdapter(adapter.getClass(),adapter);. 



*javax.xml.bind.Marshaller.setAttachmentMarshaller(AttachmentMarshaller)*

public void setAttachmentMarshaller(javax.xml.bind.attachment.AttachmentMarshaller am)

Associate a context that enables binary data within an XML document to be transmitted as XML-binary optimized attachment. The 
attachment is referenced from the XML document content model by content-id URIs(cid) references stored within the xml document. 



*javax.xml.bind.Marshaller.setEventHandler(ValidationEventHandler)*

public void setEventHandler(javax.xml.bind.ValidationEventHandler handler)
  throws |javax.xml.bind.JAXBException|
         
Allow an application to register a validation event handler. 

The validation event handler will be called by the JAXB Provider if any validation errors are encountered during calls to any 
of the marshal API's. If the client application does not register a validation event handler before invoking one of the marshal 
methods, then validation events will be handled by the default event handler which will terminate the marshal operation after 
the first error or fatal error is encountered. 

Calling this method with a null parameter will cause the Marshaller to revert back to the default default event handler. 


    handler - the validation event handler 

*javax.xml.bind.Marshaller.setListener(Marshaller.Listener)*

public void setListener(javax.xml.bind.Marshaller.Listener listener)

Register marshal event callback (|javax.xml.bind.Marshaller.Listener|) with this (|javax.xml.bind.Marshaller|) . 

There is only one Listener per Marshaller. Setting a Listener replaces the previous set Listener. One can unregister current 
Listener by setting listener to null. 


    listener - an instance of a class that implements {@link Listener} 

*javax.xml.bind.Marshaller.setProperty(String,Object)*

public void setProperty(
  java.lang.String name,
  java.lang.Object value)
  throws |javax.xml.bind.PropertyException|
         
Set the particular property in the underlying implementation of Marshaller. This method can only be used to set one of the 
standard JAXB defined properties above or a provider specific property. Attempting to set an undefined property will result in 
a PropertyException being thrown. See Supported Properties. 


    name - the name of the property to be set. This value can either be specified using one of the constant fields or a user supplied 
       string. 
    value - the value of the property to be set 

*javax.xml.bind.Marshaller.setSchema(Schema)*

public void setSchema(javax.xml.validation.Schema schema)

Specify the JAXP 1.3 Schema(|javax.xml.validation.Schema|) object that should be used to validate subsequent marshal operations 
against. Passing null into this method will disable validation. 

This method allows the caller to validate the marshalled XML as it's marshalled. 

Initially this property is set to null. 


    schema - Schema object to validate marshal operations against or null to disable validation 


