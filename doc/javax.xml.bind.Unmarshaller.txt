*javax.xml.bind.Unmarshaller* *Unmarshaller* The Unmarshaller class governs the process of deserializing XML 
 data into newly c

public interface interface Unmarshaller


|javax.xml.bind.Unmarshaller_Description|
|javax.xml.bind.Unmarshaller_Fields|
|javax.xml.bind.Unmarshaller_Constructors|
|javax.xml.bind.Unmarshaller_Methods|

================================================================================================================================

*javax.xml.bind.Unmarshaller_Methods*
|javax.xml.bind.Unmarshaller.getAdapter(Class<A>)|Gets the adapter associated with the specified type.
|javax.xml.bind.Unmarshaller.getAttachmentUnmarshaller()|
|javax.xml.bind.Unmarshaller.getEventHandler()|Return the current event handler or the default event handler if one  hasn't bee
|javax.xml.bind.Unmarshaller.getListener()|ReturnListenerregistered with thisUnmarshaller.
|javax.xml.bind.Unmarshaller.getProperty(String)|Get the particular property in the underlying implementation of   Unmarshaller
|javax.xml.bind.Unmarshaller.getSchema()|Get the JAXP 1.3javax.xml.validation.Schema Schemaobject  being used to perform unmars
|javax.xml.bind.Unmarshaller.getUnmarshallerHandler()|Get an unmarshaller handler object that can be used as a component in  an
|javax.xml.bind.Unmarshaller.isValidating()|Indicates whether or not the Unmarshaller is configured to   validate during unmars
|javax.xml.bind.Unmarshaller.setAdapter(Class<A>,A)|Associates a configured instance ofXmlAdapterwith this unmarshaller.
|javax.xml.bind.Unmarshaller.setAdapter(XmlAdapter)|Associates a configured instance ofXmlAdapterwith this unmarshaller.
|javax.xml.bind.Unmarshaller.setAttachmentUnmarshaller(AttachmentUnmarshaller)|Associate a context that resolves cid's, content
|javax.xml.bind.Unmarshaller.setEventHandler(ValidationEventHandler)|Allow an application to register a ValidationEventHandler.
|javax.xml.bind.Unmarshaller.setListener(Unmarshaller.Listener)|Register unmarshal event callbackListenerwith thisUnmarshaller.
|javax.xml.bind.Unmarshaller.setProperty(String,Object)|Set the particular property in the underlying implementation of   Unmar
|javax.xml.bind.Unmarshaller.setSchema(Schema)|Specify the JAXP 1.3javax.xml.validation.Schema Schemaobject that should be used
|javax.xml.bind.Unmarshaller.setValidating(boolean)|Specifies whether or not the default validation mechanism of the  Unmarshal
|javax.xml.bind.Unmarshaller.unmarshal(File)|Unmarshal XML data from the specified file and return the resulting  content tree.
|javax.xml.bind.Unmarshaller.unmarshal(InputSource)|Unmarshal XML data from the specified SAX InputSource and return the  resul
|javax.xml.bind.Unmarshaller.unmarshal(InputStream)|Unmarshal XML data from the specified InputStream and return the   resultin
|javax.xml.bind.Unmarshaller.unmarshal(Node)|Unmarshal global XML data from the specified DOM tree and return the resulting  co
|javax.xml.bind.Unmarshaller.unmarshal(Node,Class<T>)|Unmarshal XML data by JAXB mapped declaredType  and return the resulting 
|javax.xml.bind.Unmarshaller.unmarshal(Reader)|Unmarshal XML data from the specified Reader and return the  resulting content t
|javax.xml.bind.Unmarshaller.unmarshal(Source)|Unmarshal XML data from the specified XML Source and return the   resulting cont
|javax.xml.bind.Unmarshaller.unmarshal(Source,Class<T>)|Unmarshal XML data from the specified XML Source by declaredType and re
|javax.xml.bind.Unmarshaller.unmarshal(URL)|Unmarshal XML data from the specified URL and return the resulting  content tree.
|javax.xml.bind.Unmarshaller.unmarshal(XMLEventReader)|Unmarshal XML data from the specified pull parser and return the  result
|javax.xml.bind.Unmarshaller.unmarshal(XMLEventReader,Class<T>)|Unmarshal root element to JAXB mapped declaredType  and return 
|javax.xml.bind.Unmarshaller.unmarshal(XMLStreamReader)|Unmarshal XML data from the specified pull parser and return the  resul
|javax.xml.bind.Unmarshaller.unmarshal(XMLStreamReader,Class<T>)|Unmarshal root element to JAXB mapped declaredType  and return

*javax.xml.bind.Unmarshaller_Description*

The Unmarshaller class governs the process of deserializing XML data into newly created Java content trees, optionally 
validating the XML data as it is unmarshalled. It provides an overloading of unmarshal methods for many different input kinds. 

Unmarshalling from a File: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); Object o = u.unmarshal( 
new File( "nosferatu.xml" ) ); 





Unmarshalling from an InputStream: 



InputStream is = new FileInputStream( "nosferatu.xml" ); JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); 
Unmarshaller u = jc.createUnmarshaller(); Object o = u.unmarshal( is ); 



Unmarshalling from a URL: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); URL url = new URL( 
"http://beaker.east/nosferatu.xml" ); Object o = u.unmarshal( url ); 



Unmarshalling from a StringBuffer using a javax.xml.transform.stream.StreamSource: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); StringBuffer xmlStr = new 
StringBuffer( "<?xml version=1.0?>..." ); Object o = u.unmarshal( new StreamSource( new StringReader( xmlStr.toString() ) ) ); 



Unmarshalling from a org.w3c.dom.Node: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); 

DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setNamespaceAware(true); DocumentBuilder db = 
dbf.newDocumentBuilder(); Document doc = db.parse(new File( "nosferatu.xml")); 

Object o = u.unmarshal( doc ); 



Unmarshalling from a javax.xml.transform.sax.SAXSource using a client specified validating SAX2.0 parser: 



// configure a validating SAX2.0 parser (Xerces2) static final String JAXP_SCHEMA_LANGUAGE = 
"http://java.sun.com/xml/jaxp/properties/schemaLanguage"; static final String JAXP_SCHEMA_LOCATION = 
"http://java.sun.com/xml/jaxp/properties/schemaSource"; static final String W3C_XML_SCHEMA = 
"http://www.w3.org/2001/XMLSchema"; 

System.setProperty( "javax.xml.parsers.SAXParserFactory", "org.apache.xerces.jaxp.SAXParserFactoryImpl" ); 

SAXParserFactory spf = SAXParserFactory.newInstance(); spf.setNamespaceAware(true); spf.setValidating(true); SAXParser 
saxParser = spf.newSAXParser(); 

try { saxParser.setProperty(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA); saxParser.setProperty(JAXP_SCHEMA_LOCATION, "http://...."); 
} catch (SAXNotRecognizedException x) { // exception handling omitted } 

XMLReader xmlReader = saxParser.getXMLReader(); SAXSource source = new SAXSource( xmlReader, new InputSource( "http://..." ) ); 

// Setup JAXB to unmarshal JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = 
jc.createUnmarshaller(); ValidationEventCollector vec = new ValidationEventCollector(); u.setEventHandler( vec ); 

// turn off the JAXB provider's default validation mechanism to // avoid duplicate validation u.setValidating( false ) 

// unmarshal Object o = u.unmarshal( source ); 

// check for events if( vec.hasEvents() ) { // iterate over events } 



Unmarshalling from a StAX XMLStreamReader: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); 

javax.xml.stream.XMLStreamReader xmlStreamReader = javax.xml.stream.XMLInputFactory().newInstance().createXMLStreamReader( ... 
); 

Object o = u.unmarshal( xmlStreamReader ); 



Unmarshalling from a StAX XMLEventReader: 



JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); 

javax.xml.stream.XMLEventReader xmlEventReader = javax.xml.stream.XMLInputFactory().newInstance().createXMLEventReader( ... ); 

Object o = u.unmarshal( xmlEventReader ); 





Unmarshalling XML Data 

Unmarshalling can deserialize XML data that represents either an entire XML document or a subtree of an XML document. 
Typically, it is sufficient to use the unmarshalling methods described by Unmarshal root element that is declared globally. 
These unmarshal methods utilize (|javax.xml.bind.JAXBContext|) 's mapping of global XML element declarations and type 
definitions to JAXB mapped classes to initiate the unmarshalling of the root element of XML data. When the 
(|javax.xml.bind.JAXBContext|) 's mappings are not sufficient to unmarshal the root element of XML data, the application can 
assist the unmarshalling process by using the unmarshal by declaredType methods. These methods are useful for unmarshalling XML 
data where the root element corresponds to a local element declaration in the schema. 



An unmarshal method never returns null. If the unmarshal process is unable to unmarshal the root of XML content to a JAXB 
mapped object, a fatal error is reported that terminates processing by throwing JAXBException. 



Unmarshal a root element that is globally declared 

The unmarshal methods that do not have an declaredType parameter use (|javax.xml.bind.JAXBContext|) to unmarshal the root 
element of an XML data. The (|javax.xml.bind.JAXBContext|) instance is the one that was used to create this Unmarshaller. The 
(|javax.xml.bind.JAXBContext|) instance maintains a mapping of globally declared XML element and type definition names to JAXB 
mapped classes. The unmarshal method checks if (|javax.xml.bind.JAXBContext|) has a mapping from the root element's XML name 
and/or @xsi:type to a JAXB mapped class. If it does, it umarshalls the XML data using the appropriate JAXB mapped class. Note 
that when the root element name is unknown and the root element has an @xsi:type, the XML data is unmarshalled using that JAXB 
mapped class as the value of a (|javax.xml.bind.JAXBElement|) . When the (|javax.xml.bind.JAXBContext|) object does not have a 
mapping for the root element's name nor its @xsi:type, if it exists, then the unmarshal operation will abort immediately by 
throwing a UnmarshalException(|javax.xml.bind.UnmarshalException|) . This exception scenario can be worked around by using the 
unmarshal by declaredType methods described in the next subsection. 



Unmarshal by Declared Type 

The unmarshal methods with a declaredType parameter enable an application to deserialize a root element of XML data, even when 
there is no mapping in (|javax.xml.bind.JAXBContext|) of the root element's XML name. The unmarshaller unmarshals the root 
element using the application provided mapping specified as the declaredType parameter. Note that even when the root element's 
element name is mapped by (|javax.xml.bind.JAXBContext|) , the declaredType parameter overrides that mapping for deserializing 
the root element when using these unmarshal methods. Additionally, when the root element of XML data has an xsi:type attribute 
and that attribute's value references a type definition that is mapped to a JAXB mapped class by (|javax.xml.bind.JAXBContext|) 
, that the root element's xsi:type attribute takes precedence over the unmarshal methods declaredType parameter. These methods 
always return a JAXBElement<declaredType> instance. The table below shows how the properties of the returned JAXBElement 
instance are set. 







Unmarshal By Declared Type returned JAXBElement 

JAXBElement Property Value 



name xml element name 



value instanceof declaredType 

declaredType unmarshal method declaredType parameter 

scope null (actual scope is unknown) 





The following is an example of unmarshal by declaredType method. 

Unmarshal by declaredType from a org.w3c.dom.Node: 



Schema fragment for example <xs:schema> <xs:complexType name="FooType">...<\xs:complexType> <!-- global element declaration 
"PurchaseOrder" --> <xs:element name="PurchaseOrder"> <xs:complexType> <xs:sequence> <!-- local element declaration "foo" --> 
<xs:element name="foo" type="FooType"/> ... </xs:sequence> </xs:complexType> </xs:element> </xs:schema> 

JAXBContext jc = JAXBContext.newInstance( "com.acme.foo" ); Unmarshaller u = jc.createUnmarshaller(); 

DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); dbf.setNamespaceAware(true); DocumentBuilder db = 
dbf.newDocumentBuilder(); Document doc = db.parse(new File( "nosferatu.xml")); Element fooSubtree = ...; // traverse DOM till 
reach xml element foo, constrained by a // local element declaration in schema. 

// FooType is the JAXB mapping of the type of local element declaration foo. JAXBElement<FooType> foo = u.unmarshal( 
fooSubtree, FooType.class); 



Support for SAX2.0 Compliant Parsers 

A client application has the ability to select the SAX2.0 compliant parser of their choice. If a SAX parser is not selected, 
then the JAXB Provider's default parser will be used. Even though the JAXB Provider's default parser is not required to be 
SAX2.0 compliant, all providers are required to allow a client application to specify their own SAX2.0 parser. Some providers 
may require the client application to specify the SAX2.0 parser at schema compile time. See 
unmarshal(Source)(|javax.xml.bind.Unmarshaller|) for more detail. 

Validation and Well-Formedness 

A client application can enable or disable JAXP 1.3 validation mechanism via the setSchema(javax.xml.validation.Schema) API. 
Sophisticated clients can specify their own validating SAX 2.0 compliant parser and bypass the JAXP 1.3 validation mechanism 
using the unmarshal(Source)(|javax.xml.bind.Unmarshaller|) API. 

Since unmarshalling invalid XML content is defined in JAXB 2.0, the Unmarshaller default validation event handler was made more 
lenient than in JAXB 1.0. When schema-derived code generated by JAXB 1.0 binding compiler is registered with 
(|javax.xml.bind.JAXBContext|) , the default unmarshal validation handler is 
(|javax.xml.bind.helpers.DefaultValidationEventHandler|) and it terminates the marshal operation after encountering either a 
fatal error or an error. For a JAXB 2.0 client application, there is no explicitly defined default validation handler and the 
default event handling only terminates the marshal operation after encountering a fatal error. 





Supported Properties 

There currently are not any properties required to be supported by all JAXB Providers on Unmarshaller. However, some providers 
may support their own set of provider specific properties. 



Unmarshal Event Callbacks 

The (|javax.xml.bind.Unmarshaller|) provides two styles of callback mechanisms that allow application specific processing 
during key points in the unmarshalling process. In 'class defined' event callbacks, application specific code placed in JAXB 
mapped classes is triggered during unmarshalling. 'External listeners' allow for centralized processing of unmarshal events in 
one callback method rather than by type event callbacks. 

'Class defined' event callback methods allow any JAXB mapped class to specify its own specific callback methods by defining 
methods with the following method signature: 



// This method is called immediately after the object is created and before the unmarshalling of this // object begins. The 
callback provides an opportunity to initialize JavaBean properties prior to unmarshalling. void beforeUnmarshal(Unmarshaller, 
Object parent); 

//This method is called after all the properties (except IDREF) are unmarshalled for this object, //but before this object is 
set to the parent object. void afterUnmarshal(Unmarshaller, Object parent); 

The class defined callback methods should be used when the callback method requires access to non-public methods and/or fields 
of the class. 

The external listener callback mechanism enables the registration of a (|javax.xml.bind.Unmarshaller.Listener|) instance with 
an (|javax.xml.bind.Unmarshaller|) . The external listener receives all callback events, allowing for more centralized 
processing than per class defined callback methods. The external listener receives events when unmarshalling proces is 
marshalling to a JAXB element or to JAXB mapped class. 

The 'class defined' and external listener event callback methods are independent of each other, both can be called for one 
event. The invocation ordering when both listener callback methods exist is defined in (|javax.xml.bind.Unmarshaller.Listener|) 
and (|javax.xml.bind.Unmarshaller.Listener|) . 

An event callback method throwing an exception terminates the current unmarshal process. 





*javax.xml.bind.Unmarshaller.getAdapter(Class<A>)*

public |A| getAdapter(java.lang.Class<A> type)

Gets the adapter associated with the specified type. 

This is the reverse operation of the (|javax.xml.bind.Unmarshaller|) method. 



*javax.xml.bind.Unmarshaller.getAttachmentUnmarshaller()*

public |javax.xml.bind.attachment.AttachmentUnmarshaller| getAttachmentUnmarshaller()





*javax.xml.bind.Unmarshaller.getEventHandler()*

public |javax.xml.bind.ValidationEventHandler| getEventHandler()
  throws |javax.xml.bind.JAXBException|
         
Return the current event handler or the default event handler if one hasn't been set. 



    Returns: the current ValidationEventHandler or the default event handler if it hasn't been set 

*javax.xml.bind.Unmarshaller.getListener()*

public |javax.xml.bind.Unmarshaller.Listener| getListener()

Return (|javax.xml.bind.Unmarshaller.Listener|) registered with this (|javax.xml.bind.Unmarshaller|) . 



    Returns: registered {@link Listener} or null if no Listener is registered with this Unmarshaller. 

*javax.xml.bind.Unmarshaller.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String name)
  throws |javax.xml.bind.PropertyException|
         
Get the particular property in the underlying implementation of Unmarshaller. This method can only be used to get one of the 
standard JAXB defined properties above or a provider specific property. Attempting to get an undefined property will result in 
a PropertyException being thrown. See Supported Properties. 


    name - the name of the property to retrieve 

    Returns: the value of the requested property 

*javax.xml.bind.Unmarshaller.getSchema()*

public |javax.xml.validation.Schema| getSchema()

Get the JAXP 1.3 Schema(|javax.xml.validation.Schema|) object being used to perform unmarshal-time validation. If there is no 
Schema set on the unmarshaller, then this method will return null indicating that unmarshal-time validation will not be 
performed. 

This method provides replacement functionality for the deprecated (|javax.xml.bind.Unmarshaller|) API as well as access to the 
Schema object. To determine if the Unmarshaller has validation enabled, simply test the return type for null: 

boolean isValidating = u.getSchema()!=null; 



    Returns: the Schema object being used to perform unmarshal-time validation or null if not present 

*javax.xml.bind.Unmarshaller.getUnmarshallerHandler()*

public |javax.xml.bind.UnmarshallerHandler| getUnmarshallerHandler()

Get an unmarshaller handler object that can be used as a component in an XML pipeline. 

The JAXB Provider can return the same handler object for multiple invocations of this method. In other words, this method does 
not necessarily create a new instance of UnmarshallerHandler. If the application needs to use more than one 
UnmarshallerHandler, it should create more than one Unmarshaller. 



    Returns: the unmarshaller handler object 

*javax.xml.bind.Unmarshaller.isValidating()*

public boolean isValidating()
  throws |javax.xml.bind.JAXBException|
         
Indicates whether or not the Unmarshaller is configured to validate during unmarshal operations. 

This API returns the state of the JAXB Provider's default unmarshal-time validation mechanism. 

This method is deprecated as of JAXB 2.0 - please use the new (|javax.xml.bind.Unmarshaller|) API. 

    Deprecated: since JAXB2.0, please see {@link #getSchema()}


    Returns: true if the Unmarshaller is configured to validate during unmarshal operations, false otherwise 

*javax.xml.bind.Unmarshaller.setAdapter(Class<A>,A)*

public void setAdapter(
  java.lang.Class<A> type,
  A extends javax.xml.bind.annotation.adapters.XmlAdapter adapter)

Associates a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) with this unmarshaller. 

Every unmarshaller internally maintains a (|java.util.Map|) < (|java.lang.Class|) , 
(|javax.xml.bind.annotation.adapters.XmlAdapter|) >, which it uses for unmarshalling classes whose fields/methods are annotated 
with (|javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter|) . 

This method allows applications to use a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) . When an 
instance of an adapter is not given, an unmarshaller will create one by invoking its default constructor. 


    type - The type of the adapter. The specified instance will be used when {@link 
       javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter#value()} refers to this type. 
    adapter - The instance of the adapter to be used. If null, it will un-register the current adapter set for this type. 

*javax.xml.bind.Unmarshaller.setAdapter(XmlAdapter)*

public void setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter adapter)

Associates a configured instance of (|javax.xml.bind.annotation.adapters.XmlAdapter|) with this unmarshaller. 

This is a convenience method that invokes setAdapter(adapter.getClass(),adapter);. 



*javax.xml.bind.Unmarshaller.setAttachmentUnmarshaller(AttachmentUnmarshaller)*

public void setAttachmentUnmarshaller(javax.xml.bind.attachment.AttachmentUnmarshaller au)

Associate a context that resolves cid's, content-id URIs, to binary data passed as attachments. 

Unmarshal time validation, enabled via (|javax.xml.bind.Unmarshaller|) , must be supported even when unmarshaller is performing 
XOP processing. 



*javax.xml.bind.Unmarshaller.setEventHandler(ValidationEventHandler)*

public void setEventHandler(javax.xml.bind.ValidationEventHandler handler)
  throws |javax.xml.bind.JAXBException|
         
Allow an application to register a ValidationEventHandler. 

The ValidationEventHandler will be called by the JAXB Provider if any validation errors are encountered during calls to any of 
the unmarshal methods. If the client application does not register a ValidationEventHandler before invoking the unmarshal 
methods, then ValidationEvents will be handled by the default event handler which will terminate the unmarshal operation after 
the first error or fatal error is encountered. 

Calling this method with a null parameter will cause the Unmarshaller to revert back to the default event handler. 


    handler - the validation event handler 

*javax.xml.bind.Unmarshaller.setListener(Unmarshaller.Listener)*

public void setListener(javax.xml.bind.Unmarshaller.Listener listener)

Register unmarshal event callback (|javax.xml.bind.Unmarshaller.Listener|) with this (|javax.xml.bind.Unmarshaller|) . 

There is only one Listener per Unmarshaller. Setting a Listener replaces the previous set Listener. One can unregister current 
Listener by setting listener to null. 


    listener - provides unmarshal event callbacks for this {@link Unmarshaller} 

*javax.xml.bind.Unmarshaller.setProperty(String,Object)*

public void setProperty(
  java.lang.String name,
  java.lang.Object value)
  throws |javax.xml.bind.PropertyException|
         
Set the particular property in the underlying implementation of Unmarshaller. This method can only be used to set one of the 
standard JAXB defined properties above or a provider specific property. Attempting to set an undefined property will result in 
a PropertyException being thrown. See Supported Properties. 


    name - the name of the property to be set. This value can either be specified using one of the constant fields or a user supplied 
       string. 
    value - the value of the property to be set 

*javax.xml.bind.Unmarshaller.setSchema(Schema)*

public void setSchema(javax.xml.validation.Schema schema)

Specify the JAXP 1.3 Schema(|javax.xml.validation.Schema|) object that should be used to validate subsequent unmarshal 
operations against. Passing null into this method will disable validation. 

This method replaces the deprecated setValidating(boolean)(|javax.xml.bind.Unmarshaller|) API. 

Initially this property is set to null. 


    schema - Schema object to validate unmarshal operations against or null to disable validation 

*javax.xml.bind.Unmarshaller.setValidating(boolean)*

public void setValidating(boolean validating)
  throws |javax.xml.bind.JAXBException|
         
Specifies whether or not the default validation mechanism of the Unmarshaller should validate during unmarshal operations. By 
default, the Unmarshaller does not validate. 

This method may only be invoked before or after calling one of the unmarshal methods. 

This method only controls the JAXB Provider's default unmarshal-time validation mechanism - it has no impact on clients that 
specify their own validating SAX 2.0 compliant parser. Clients that specify their own unmarshal-time validation mechanism may 
wish to turn off the JAXB Provider's default validation mechanism via this API to avoid "double validation". 

This method is deprecated as of JAXB 2.0 - please use the new (|javax.xml.bind.Unmarshaller|) API. 

    Deprecated: since JAXB2.0, please see {@link #setSchema(javax.xml.validation.Schema)}

    validating - true if the Unmarshaller should validate during unmarshal, false otherwise 

*javax.xml.bind.Unmarshaller.unmarshal(File)*

public |java.lang.Object| unmarshal(java.io.File f)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified file and return the resulting content tree. 

Implements Unmarshal Global Root Element. 


    f - the file to unmarshal XML data from 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(InputSource)*

public |java.lang.Object| unmarshal(org.xml.sax.InputSource source)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified SAX InputSource and return the resulting content tree. 

Implements Unmarshal Global Root Element. 


    source - the input source to unmarshal XML data from 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(InputStream)*

public |java.lang.Object| unmarshal(java.io.InputStream is)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified InputStream and return the resulting content tree. Validation event location information 
may be incomplete when using this form of the unmarshal API. 

Implements Unmarshal Global Root Element. 


    is - the InputStream to unmarshal XML data from 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(Node)*

public |java.lang.Object| unmarshal(org.w3c.dom.Node node)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal global XML data from the specified DOM tree and return the resulting content tree. 

Implements Unmarshal Global Root Element. 


    node - the document/element to unmarshal XML data from. The caller must support at least Document and Element. 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(Node,Class<T>)*

public |javax.xml.bind.JAXBElement|<T> unmarshal(
  org.w3c.dom.Node node,
  java.lang.Class<T> declaredType)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data by JAXB mapped declaredType and return the resulting content tree. 

Implements Unmarshal by Declared Type 


    node - the document/element to unmarshal XML data from. The caller must support at least Document and Element. 
    declaredType - appropriate JAXB mapped class to hold node's XML data. 

    Returns: JAXB Element representation of node 

*javax.xml.bind.Unmarshaller.unmarshal(Reader)*

public |java.lang.Object| unmarshal(java.io.Reader reader)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified Reader and return the resulting content tree. Validation event location information may 
be incomplete when using this form of the unmarshal API, because a Reader does not provide the system ID. 

Implements Unmarshal Global Root Element. 


    reader - the Reader to unmarshal XML data from 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(Source)*

public |java.lang.Object| unmarshal(javax.xml.transform.Source source)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified XML Source and return the resulting content tree. 

Implements Unmarshal Global Root Element. 



SAX 2.0 Parser Pluggability 

A client application can choose not to use the default parser mechanism supplied with their JAXB provider. Any SAX 2.0 
compliant parser can be substituted for the JAXB provider's default mechanism. To do so, the client application must properly 
configure a SAXSource containing an XMLReader implemented by the SAX 2.0 parser provider. If the XMLReader has an 
org.xml.sax.ErrorHandler registered on it, it will be replaced by the JAXB Provider so that validation errors can be reported 
via the ValidationEventHandler mechanism of JAXB. If the SAXSource does not contain an XMLReader, then the JAXB provider's 
default parser mechanism will be used. 

This parser replacement mechanism can also be used to replace the JAXB provider's unmarshal-time validation engine. The client 
application must properly configure their SAX 2.0 compliant parser to perform validation (as shown in the example above). Any 
SAXParserExceptions encountered by the parser during the unmarshal operation will be processed by the JAXB provider and 
converted into JAXB ValidationEvent objects which will be reported back to the client via the ValidationEventHandler registered 
with the Unmarshaller. Note: specifying a substitute validating SAX 2.0 parser for unmarshalling does not necessarily replace 
the validation engine used by the JAXB provider for performing on-demand validation. 

The only way for a client application to specify an alternate parser mechanism to be used during unmarshal is via the 
unmarshal(SAXSource) API. All other forms of the unmarshal method (File, URL, Node, etc) will use the JAXB provider's default 
parser and validator mechanisms. 


    source - the XML Source to unmarshal XML data from (providers are only required to support SAXSource, DOMSource, and StreamSource) 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(Source,Class<T>)*

public |javax.xml.bind.JAXBElement|<T> unmarshal(
  javax.xml.transform.Source source,
  java.lang.Class<T> declaredType)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified XML Source by declaredType and return the resulting content tree. 

Implements Unmarshal by Declared Type 

See SAX 2.0 Parser Pluggability 


    source - the XML Source to unmarshal XML data from (providers are only required to support SAXSource, DOMSource, and StreamSource) 
    declaredType - appropriate JAXB mapped class to hold source's xml root element 

    Returns: Java content rooted by JAXB Element 

*javax.xml.bind.Unmarshaller.unmarshal(URL)*

public |java.lang.Object| unmarshal(java.net.URL url)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified URL and return the resulting content tree. 

Implements Unmarshal Global Root Element. 


    url - the url to unmarshal XML data from 

    Returns: the newly created root object of the java content tree 

*javax.xml.bind.Unmarshaller.unmarshal(XMLEventReader)*

public |java.lang.Object| unmarshal(javax.xml.stream.XMLEventReader reader)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified pull parser and return the resulting content tree. 

This method is an Unmarshal Global Root method. 

This method assumes that the parser is on a START_DOCUMENT or START_ELEMENT event. Unmarshalling will be done from this start 
event to the corresponding end event. If this method returns successfully, the reader will be pointing at the token right after 
the end event. 


    reader - The parser to be read. 

    Returns: the newly created root object of the java content tree. 

*javax.xml.bind.Unmarshaller.unmarshal(XMLEventReader,Class<T>)*

public |javax.xml.bind.JAXBElement|<T> unmarshal(
  javax.xml.stream.XMLEventReader reader,
  java.lang.Class<T> declaredType)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal root element to JAXB mapped declaredType and return the resulting content tree. 

This method implements unmarshal by declaredType. 

This method assumes that the parser is on a START_DOCUMENT or START_ELEMENT event. Unmarshalling will be done from this start 
event to the corresponding end event. If this method returns successfully, the reader will be pointing at the token right after 
the end event. 


    reader - The parser to be read. 
    declaredType - appropriate JAXB mapped class to hold reader's START_ELEMENT XML data. 

    Returns: content tree rooted by JAXB Element representation 

*javax.xml.bind.Unmarshaller.unmarshal(XMLStreamReader)*

public |java.lang.Object| unmarshal(javax.xml.stream.XMLStreamReader reader)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML data from the specified pull parser and return the resulting content tree. 

Implements Unmarshal Global Root Element. 

This method assumes that the parser is on a START_DOCUMENT or START_ELEMENT event. Unmarshalling will be done from this start 
event to the corresponding end event. If this method returns successfully, the reader will be pointing at the token right after 
the end event. 


    reader - The parser to be read. 

    Returns: the newly created root object of the java content tree. 

*javax.xml.bind.Unmarshaller.unmarshal(XMLStreamReader,Class<T>)*

public |javax.xml.bind.JAXBElement|<T> unmarshal(
  javax.xml.stream.XMLStreamReader reader,
  java.lang.Class<T> declaredType)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal root element to JAXB mapped declaredType and return the resulting content tree. 

This method implements unmarshal by declaredType. 

This method assumes that the parser is on a START_DOCUMENT or START_ELEMENT event. Unmarshalling will be done from this start 
event to the corresponding end event. If this method returns successfully, the reader will be pointing at the token right after 
the end event. 


    reader - The parser to be read. 
    declaredType - appropriate JAXB mapped class to hold reader's START_ELEMENT XML data. 

    Returns: content tree rooted by JAXB Element representation 


