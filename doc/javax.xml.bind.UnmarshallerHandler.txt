*javax.xml.bind.UnmarshallerHandler* *UnmarshallerHandler* Unmarshaller implemented as SAX ContentHandler.

public interface interface UnmarshallerHandler

  implements |org.xml.sax.ContentHandler|

|javax.xml.bind.UnmarshallerHandler_Description|
|javax.xml.bind.UnmarshallerHandler_Fields|
|javax.xml.bind.UnmarshallerHandler_Constructors|
|javax.xml.bind.UnmarshallerHandler_Methods|

================================================================================================================================

*javax.xml.bind.UnmarshallerHandler_Methods*
|javax.xml.bind.UnmarshallerHandler.getResult()|Obtains the unmarshalled result.

*javax.xml.bind.UnmarshallerHandler_Description*

Unmarshaller implemented as SAX ContentHandler. 

Applications can use this interface to use their JAXB provider as a component in an XML pipeline. For example: 



JAXBContext context = JAXBContext.newInstance( "org.acme.foo" ); 

Unmarshaller unmarshaller = context.createUnmarshaller(); 

UnmarshallerHandler unmarshallerHandler = unmarshaller.getUnmarshallerHandler(); 

SAXParserFactory spf = SAXParserFactory.newInstance(); spf.setNamespaceAware( true ); 

XMLReader xmlReader = spf.newSAXParser().getXMLReader(); xmlReader.setContentHandler( unmarshallerHandler ); 
xmlReader.parse(new InputSource( new FileInputStream( XML_FILE ) ) ); 

MyObject myObject= (MyObject)unmarshallerHandler.getResult(); 



This interface is reusable: even if the user fails to unmarshal an object, s/he can still start a new round of unmarshalling. 



*javax.xml.bind.UnmarshallerHandler.getResult()*

public |java.lang.Object| getResult()
  throws |java.lang.IllegalStateException|
         |javax.xml.bind.JAXBException|
         
Obtains the unmarshalled result. 

This method can be called only after this handler receives the endDocument SAX event. 



    Returns: always return a non-null valid object which was unmarshalled. 


