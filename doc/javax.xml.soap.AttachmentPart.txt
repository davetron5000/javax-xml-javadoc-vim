*javax.xml.soap.AttachmentPart* *AttachmentPart* A single attachment to a SOAPMessage object.

public abstract class AttachmentPart
  extends    |java.lang.Object|

|javax.xml.soap.AttachmentPart_Description|
|javax.xml.soap.AttachmentPart_Fields|
|javax.xml.soap.AttachmentPart_Constructors|
|javax.xml.soap.AttachmentPart_Methods|

================================================================================================================================

*javax.xml.soap.AttachmentPart_Constructors*
|javax.xml.soap.AttachmentPart()|

*javax.xml.soap.AttachmentPart_Methods*
|javax.xml.soap.AttachmentPart.addMimeHeader(String,String)|Adds a MIME header with the specified name and value to this  Attac
|javax.xml.soap.AttachmentPart.clearContent()|Clears out the content of this AttachmentPart object.
|javax.xml.soap.AttachmentPart.getAllMimeHeaders()|Retrieves all the headers for this AttachmentPart object  as an iterator ove
|javax.xml.soap.AttachmentPart.getBase64Content()|Returns an InputStream which can be used to obtain the   content of Attachmen
|javax.xml.soap.AttachmentPart.getContent()|Gets the content of this AttachmentPart object as a Java  object.
|javax.xml.soap.AttachmentPart.getContentId()|Gets the value of the MIME header whose name is "Content-ID".
|javax.xml.soap.AttachmentPart.getContentLocation()|Gets the value of the MIME header whose name is "Content-Location".
|javax.xml.soap.AttachmentPart.getContentType()|Gets the value of the MIME header whose name is "Content-Type".
|javax.xml.soap.AttachmentPart.getDataHandler()|Gets the DataHandler object for this AttachmentPart  object.
|javax.xml.soap.AttachmentPart.getMatchingMimeHeaders(String[])|Retrieves all MimeHeader objects that match a name in  the give
|javax.xml.soap.AttachmentPart.getMimeHeader(String)|Gets all the values of the header identified by the given  String.
|javax.xml.soap.AttachmentPart.getNonMatchingMimeHeaders(String[])|Retrieves all MimeHeader objects whose name does  not match 
|javax.xml.soap.AttachmentPart.getRawContent()|Gets the content of this AttachmentPart object as an   InputStream as if a call 
|javax.xml.soap.AttachmentPart.getRawContentBytes()|Gets the content of this AttachmentPart object as a   byte[] array as if a 
|javax.xml.soap.AttachmentPart.getSize()|Returns the number of bytes in this AttachmentPart  object.
|javax.xml.soap.AttachmentPart.removeAllMimeHeaders()|Removes all the MIME header entries.
|javax.xml.soap.AttachmentPart.removeMimeHeader(String)|Removes all MIME headers that match the given name.
|javax.xml.soap.AttachmentPart.setBase64Content(InputStream,String)|Sets the content of this attachment part from the Base64 so
|javax.xml.soap.AttachmentPart.setContent(Object,String)|Sets the content of this attachment part to that of the given   Object
|javax.xml.soap.AttachmentPart.setContentId(String)|Sets the MIME header whose name is "Content-ID" with the given value.
|javax.xml.soap.AttachmentPart.setContentLocation(String)|Sets the MIME header whose name is "Content-Location" with the given 
|javax.xml.soap.AttachmentPart.setContentType(String)|Sets the MIME header whose name is "Content-Type" with the given value.
|javax.xml.soap.AttachmentPart.setDataHandler(DataHandler)|Sets the given DataHandler object as the data handler  for this Atta
|javax.xml.soap.AttachmentPart.setMimeHeader(String,String)|Changes the first header entry that matches the given name  to the 
|javax.xml.soap.AttachmentPart.setRawContent(InputStream,String)|Sets the content of this attachment part to that contained by 
|javax.xml.soap.AttachmentPart.setRawContentBytes(byte[],int,int,String)|Sets the content of this attachment part to that conta

*javax.xml.soap.AttachmentPart_Description*

A single attachment to a SOAPMessage object. A SOAPMessage object may contain zero, one, or many AttachmentPart objects. Each 
AttachmentPart object consists of two parts, application-specific content and associated MIME headers. The MIME headers 
consists of name/value pairs that can be used to identify and describe the content. 

An AttachmentPart object must conform to certain standards. 

It must conform to MIME [RFC2045] standards It MUST contain content The header portion MUST include the following header: 

Content-Type This header identifies the type of data in the content of an AttachmentPart object and MUST conform to [RFC2045]. 
The following is an example of a Content-Type header: 

Content-Type: application/xml 

The following line of code, in which ap is an AttachmentPart object, sets the header shown in the previous example. 

ap.setMimeHeader("Content-Type", "application/xml"); 





There are no restrictions on the content portion of an AttachmentPart object. The content may be anything from a simple plain 
text object to a complex XML document or image file. 

An AttachmentPart object is created with the method SOAPMessage.createAttachmentPart. After setting its MIME headers, the 
AttachmentPart object is added to the message that created it with the method SOAPMessage.addAttachmentPart. 

The following code fragment, in which m is a SOAPMessage object and contentStringl is a String, creates an instance of 
AttachmentPart, sets the AttachmentPart object with some content and header information, and adds the AttachmentPart object to 
the SOAPMessage object. 

AttachmentPart ap1 = m.createAttachmentPart(); ap1.setContent(contentString1, "text/plain"); m.addAttachmentPart(ap1); 

The following code fragment creates and adds a second AttachmentPart instance to the same message. jpegData is a binary byte 
buffer representing the jpeg file. 

AttachmentPart ap2 = m.createAttachmentPart(); byte[] jpegData = ...; ap2.setContent(new ByteArrayInputStream(jpegData), 
"image/jpeg"); m.addAttachmentPart(ap2); 

The getContent method retrieves the contents and header from an AttachmentPart object. Depending on the DataContentHandler 
objects present, the returned Object can either be a typed Java object corresponding to the MIME type or an InputStream object 
that contains the content as bytes. 

String content1 = ap1.getContent(); java.io.InputStream content2 = ap2.getContent(); 

The method clearContent removes all the content from an AttachmentPart object but does not affect its header information. 

ap1.clearContent(); 



*javax.xml.soap.AttachmentPart()*

public AttachmentPart()




*javax.xml.soap.AttachmentPart.addMimeHeader(String,String)*

public abstract void addMimeHeader(
  java.lang.String name,
  java.lang.String value)

Adds a MIME header with the specified name and value to this AttachmentPart object. 

Note that RFC822 headers can contain only US-ASCII characters. 


    name - a String giving the name of the header to be added 
    value - a String giving the value of the header to be added 

*javax.xml.soap.AttachmentPart.clearContent()*

public abstract void clearContent()

Clears out the content of this AttachmentPart object. The MIME header portion is left untouched. 



*javax.xml.soap.AttachmentPart.getAllMimeHeaders()*

public abstract |java.util.Iterator| getAllMimeHeaders()

Retrieves all the headers for this AttachmentPart object as an iterator over the MimeHeader objects. 



    Returns: an Iterator object with all of the Mime headers for this AttachmentPart object 

*javax.xml.soap.AttachmentPart.getBase64Content()*

public abstract |java.io.InputStream| getBase64Content()
  throws |javax.xml.soap.SOAPException|
         
Returns an InputStream which can be used to obtain the content of AttachmentPart as Base64 encoded character data, this method 
would base64 encode the raw bytes of the attachment and return. 



    Returns: an InputStream from which the Base64 encoded AttachmentPart can be read. 

*javax.xml.soap.AttachmentPart.getContent()*

public abstract |java.lang.Object| getContent()
  throws |javax.xml.soap.SOAPException|
         
Gets the content of this AttachmentPart object as a Java object. The type of the returned Java object depends on (1) the 
DataContentHandler object that is used to interpret the bytes and (2) the Content-Type given in the header. 

For the MIME content types "text/plain", "text/html" and "text/xml", the DataContentHandler object does the conversions to and 
from the Java types corresponding to the MIME types. For other MIME types,the DataContentHandler object can return an 
InputStream object that contains the content data as raw bytes. 

A SAAJ-compliant implementation must, as a minimum, return a java.lang.String object corresponding to any content stream with a 
Content-Type value of text/plain, a javax.xml.transform.stream.StreamSource object corresponding to a content stream with a 
Content-Type value of text/xml, a java.awt.Image object corresponding to a content stream with a Content-Type value of 
image/gif or image/jpeg. For those content types that an installed DataContentHandler object does not understand, the 
DataContentHandler object is required to return a java.io.InputStream object with the raw bytes. 



    Returns: a Java object with the content of this AttachmentPart object 

*javax.xml.soap.AttachmentPart.getContentId()*

public |java.lang.String| getContentId()

Gets the value of the MIME header whose name is "Content-ID". 



    Returns: a String giving the value of the "Content-ID" header or null if there is none 

*javax.xml.soap.AttachmentPart.getContentLocation()*

public |java.lang.String| getContentLocation()

Gets the value of the MIME header whose name is "Content-Location". 



    Returns: a String giving the value of the "Content-Location" header or null if there is none 

*javax.xml.soap.AttachmentPart.getContentType()*

public |java.lang.String| getContentType()

Gets the value of the MIME header whose name is "Content-Type". 



    Returns: a String giving the value of the "Content-Type" header or null if there is none 

*javax.xml.soap.AttachmentPart.getDataHandler()*

public abstract |javax.activation.DataHandler| getDataHandler()
  throws |javax.xml.soap.SOAPException|
         
Gets the DataHandler object for this AttachmentPart object. 



    Returns: the DataHandler object associated with this AttachmentPart object 

*javax.xml.soap.AttachmentPart.getMatchingMimeHeaders(String[])*

public abstract |java.util.Iterator| getMatchingMimeHeaders(java.lang.String[] names)

Retrieves all MimeHeader objects that match a name in the given array. 


    names - a String array with the name(s) of the MIME headers to be returned 

    Returns: all of the MIME headers that match one of the names in the given array as an Iterator object 

*javax.xml.soap.AttachmentPart.getMimeHeader(String)*

public abstract |java.lang.String|[] getMimeHeader(java.lang.String name)

Gets all the values of the header identified by the given String. 


    name - the name of the header; example: "Content-Type" 

    Returns: a String array giving the value for the specified header 

*javax.xml.soap.AttachmentPart.getNonMatchingMimeHeaders(String[])*

public abstract |java.util.Iterator| getNonMatchingMimeHeaders(java.lang.String[] names)

Retrieves all MimeHeader objects whose name does not match a name in the given array. 


    names - a String array with the name(s) of the MIME headers not to be returned 

    Returns: all of the MIME headers in this AttachmentPart object except those that match one of the names in the given array. The 
             nonmatching MIME headers are returned as an Iterator object. 

*javax.xml.soap.AttachmentPart.getRawContent()*

public abstract |java.io.InputStream| getRawContent()
  throws |javax.xml.soap.SOAPException|
         
Gets the content of this AttachmentPart object as an InputStream as if a call had been made to getContent and no 
DataContentHandler had been registered for the content-type of this AttachmentPart. 

Note that reading from the returned InputStream would result in consuming the data in the stream. It is the responsibility of 
the caller to reset the InputStream appropriately before calling a Subsequent API. If a copy of the raw attachment content is 
required then the (|javax.xml.soap.AttachmentPart|) API should be used instead. 



    Returns: an InputStream from which the raw data contained by the AttachmentPart can be accessed. 

*javax.xml.soap.AttachmentPart.getRawContentBytes()*

public abstract byte[] getRawContentBytes()
  throws |javax.xml.soap.SOAPException|
         
Gets the content of this AttachmentPart object as a byte[] array as if a call had been made to getContent and no 
DataContentHandler had been registered for the content-type of this AttachmentPart. 



    Returns: a byte[] array containing the raw data of the AttachmentPart. 

*javax.xml.soap.AttachmentPart.getSize()*

public abstract int getSize()
  throws |javax.xml.soap.SOAPException|
         
Returns the number of bytes in this AttachmentPart object. 



    Returns: the size of this AttachmentPart object in bytes or -1 if the size cannot be determined 

*javax.xml.soap.AttachmentPart.removeAllMimeHeaders()*

public abstract void removeAllMimeHeaders()

Removes all the MIME header entries. 



*javax.xml.soap.AttachmentPart.removeMimeHeader(String)*

public abstract void removeMimeHeader(java.lang.String header)

Removes all MIME headers that match the given name. 


    header - the string name of the MIME header/s to be removed 

*javax.xml.soap.AttachmentPart.setBase64Content(InputStream,String)*

public abstract void setBase64Content(
  java.io.InputStream content,
  java.lang.String contentType)
  throws |javax.xml.soap.SOAPException|
         
Sets the content of this attachment part from the Base64 source InputStream and sets the value of the Content-Type header to 
the value contained in contentType, This method would first decode the base64 input and write the resulting raw bytes to the 
attachment. 

A subsequent call to getSize() may not be an exact measure of the content size. 


    content - the base64 encoded data to add to the attachment part 
    contentType - the value to set into the Content-Type header 

*javax.xml.soap.AttachmentPart.setContent(Object,String)*

public abstract void setContent(
  java.lang.Object object,
  java.lang.String contentType)

Sets the content of this attachment part to that of the given Object and sets the value of the Content-Type header to the given 
type. The type of the Object should correspond to the value given for the Content-Type. This depends on the particular set of 
DataContentHandler objects in use. 


    object - the Java object that makes up the content for this attachment part 
    contentType - the MIME string that specifies the type of the content 

*javax.xml.soap.AttachmentPart.setContentId(String)*

public void setContentId(java.lang.String contentId)

Sets the MIME header whose name is "Content-ID" with the given value. 


    contentId - a String giving the value of the "Content-ID" header 

*javax.xml.soap.AttachmentPart.setContentLocation(String)*

public void setContentLocation(java.lang.String contentLocation)

Sets the MIME header whose name is "Content-Location" with the given value. 


    contentLocation - a String giving the value of the "Content-Location" header 

*javax.xml.soap.AttachmentPart.setContentType(String)*

public void setContentType(java.lang.String contentType)

Sets the MIME header whose name is "Content-Type" with the given value. 


    contentType - a String giving the value of the "Content-Type" header 

*javax.xml.soap.AttachmentPart.setDataHandler(DataHandler)*

public abstract void setDataHandler(javax.activation.DataHandler dataHandler)

Sets the given DataHandler object as the data handler for this AttachmentPart object. Typically, on an incoming message, the 
data handler is automatically set. When a message is being created and populated with content, the setDataHandler method can be 
used to get data from various data sources into the message. 


    dataHandler - the DataHandler object to be set 

*javax.xml.soap.AttachmentPart.setMimeHeader(String,String)*

public abstract void setMimeHeader(
  java.lang.String name,
  java.lang.String value)

Changes the first header entry that matches the given name to the given value, adding a new header if no existing header 
matches. This method also removes all matching headers but the first. 

Note that RFC822 headers can only contain US-ASCII characters. 


    name - a String giving the name of the header for which to search 
    value - a String giving the value to be set for the header whose name matches the given name 

*javax.xml.soap.AttachmentPart.setRawContent(InputStream,String)*

public abstract void setRawContent(
  java.io.InputStream content,
  java.lang.String contentType)
  throws |javax.xml.soap.SOAPException|
         
Sets the content of this attachment part to that contained by the InputStream content and sets the value of the Content-Type 
header to the value contained in contentType. 

A subsequent call to getSize() may not be an exact measure of the content size. 


    content - the raw data to add to the attachment part 
    contentType - the value to set into the Content-Type header 

*javax.xml.soap.AttachmentPart.setRawContentBytes(byte[],int,int,String)*

public abstract void setRawContentBytes(
  byte[] content,
  int offset,
  int len,
  java.lang.String contentType)
  throws |javax.xml.soap.SOAPException|
         
Sets the content of this attachment part to that contained by the byte[] array content and sets the value of the Content-Type 
header to the value contained in contentType. 


    content - the raw data to add to the attachment part 
    contentType - the value to set into the Content-Type header 
    offset - the offset in the byte array of the content 
    len - the number of bytes that form the content 


