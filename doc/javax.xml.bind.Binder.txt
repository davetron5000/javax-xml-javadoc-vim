*javax.xml.bind.Binder* *Binder* Enable synchronization between XML infoset nodes and JAXB objects 
 representing same XML docum

public abstract class Binder<XmlNode>
  extends    |java.lang.Object|

|javax.xml.bind.Binder_Description|
|javax.xml.bind.Binder_Fields|
|javax.xml.bind.Binder_Constructors|
|javax.xml.bind.Binder_Methods|

================================================================================================================================

*javax.xml.bind.Binder_Constructors*
|javax.xml.bind.Binder()|

*javax.xml.bind.Binder_Methods*
|javax.xml.bind.Binder.getEventHandler()|Return the current event handler or the default event handler if one  hasn't been set.
|javax.xml.bind.Binder.getJAXBNode(XmlNode)|Gets the JAXB object associated with the given XML element.
|javax.xml.bind.Binder.getProperty(String)|Get the particular property in the underlying implementation of  Binder.
|javax.xml.bind.Binder.getSchema()|Gets the lastSchemaobject (including null) set by the#setSchema(Schema)method.
|javax.xml.bind.Binder.getXMLNode(Object)|Gets the XML element associated with the given JAXB object.
|javax.xml.bind.Binder.marshal(Object,XmlNode)|Marshal a JAXB object tree to a new XML document.
|javax.xml.bind.Binder.setEventHandler(ValidationEventHandler)|Allow an application to register a ValidationEventHandler.
|javax.xml.bind.Binder.setProperty(String,Object)|Set the particular property in the underlying implementation of  Binder.
|javax.xml.bind.Binder.setSchema(Schema)|Specifies whether marshal, unmarshal and update methods  performs validation on their 
|javax.xml.bind.Binder.unmarshal(XmlNode)|Unmarshal XML infoset view to a JAXB object tree.
|javax.xml.bind.Binder.unmarshal(XmlNode,Class<T>)|Unmarshal XML root element by provided declaredType   to a JAXB object tree.
|javax.xml.bind.Binder.updateJAXB(XmlNode)|Takes an XML node and updates its associated JAXB object and its descendants.
|javax.xml.bind.Binder.updateXML(Object)|Takes an JAXB object and updates  its associated XML node and its descendants.
|javax.xml.bind.Binder.updateXML(Object,XmlNode)|Changes in JAXB object tree are updated in its associated XML parse tree.

*javax.xml.bind.Binder_Description*

Enable synchronization between XML infoset nodes and JAXB objects representing same XML document. 

An instance of this class maintains the association between XML nodes of an infoset preserving view and a JAXB representation 
of an XML document. Navigation between the two views is provided by the methods (|javax.xml.bind.Binder|) and 
(|javax.xml.bind.Binder|) . 

Modifications can be made to either the infoset preserving view or the JAXB representation of the document while the other view 
remains unmodified. The binder is able to synchronize the changes made in the modified view back into the other view using the 
appropriate Binder update methods, (|javax.xml.bind.Binder|) or (|javax.xml.bind.Binder|) . 

A typical usage scenario is the following: 

load XML document into an XML infoset representation (|javax.xml.bind.Binder|) XML infoset view to JAXB view. (Note to conserve 
resources, it is possible to only unmarshal a subtree of the XML infoset view to the JAXB view.) application access/updates 
JAXB view of XML document. (|javax.xml.bind.Binder|) synchronizes modifications to JAXB view back into the XML infoset view. 
Update operation preserves as much of original XML infoset as possible (i.e. comments, PI, ...) 



A Binder instance is created using the factory method (|javax.xml.bind.JAXBContext|) or (|javax.xml.bind.JAXBContext|) . 

The template parameter, XmlNode, is the root interface/class for the XML infoset preserving representation. A Binder 
implementation is required to minimally support an XmlNode value of org.w3c.dom.Node.class. A Binder implementation can support 
alternative XML infoset preserving representations. 



*javax.xml.bind.Binder()*

public Binder()




*javax.xml.bind.Binder.getEventHandler()*

public abstract |javax.xml.bind.ValidationEventHandler| getEventHandler()
  throws |javax.xml.bind.JAXBException|
         
Return the current event handler or the default event handler if one hasn't been set. 



    Returns: the current ValidationEventHandler or the default event handler if it hasn't been set 

*javax.xml.bind.Binder.getJAXBNode(XmlNode)*

public abstract |java.lang.Object| getJAXBNode(XmlNode xmlNode)

Gets the JAXB object associated with the given XML element. 

Once a JAXB object tree is associated with an XML fragment, this method enables navigation between the two trees. 

An association between an XML element and a JAXB object is established by the unmarshal, marshal and update methods. Note that 
this association is partial; not all XML elements have associated JAXB objects, and not all JAXB objects have associated XML 
elements. 



    Returns: null if the specified XML node is not known to this {@link Binder}, or if it is not associated with a JAXB object. 

*javax.xml.bind.Binder.getProperty(String)*

public abstract |java.lang.Object| getProperty(java.lang.String name)
  throws |javax.xml.bind.PropertyException|
         
Get the particular property in the underlying implementation of Binder. This method can only be used to get one of the standard 
JAXB defined unmarshal/marshal properties or a provider specific property for binder, unmarshal or marshal. Attempting to get 
an undefined property will result in a PropertyException being thrown. See Supported Unmarshal Properties and Supported Marshal 
Properties. 


    name - the name of the property to retrieve 

    Returns: the value of the requested property 

*javax.xml.bind.Binder.getSchema()*

public abstract |javax.xml.validation.Schema| getSchema()

Gets the last (|javax.xml.validation.Schema|) object (including null) set by the (|javax.xml.bind.Binder|) method. 



    Returns: the Schema object for validation or null if not present 

*javax.xml.bind.Binder.getXMLNode(Object)*

public abstract |XmlNode| getXMLNode(java.lang.Object jaxbObject)

Gets the XML element associated with the given JAXB object. 

Once a JAXB object tree is associated with an XML fragment, this method enables navigation between the two trees. 

An association between an XML element and a JAXB object is established by the bind methods and the update methods. Note that 
this association is partial; not all XML elements have associated JAXB objects, and not all JAXB objects have associated XML 
elements. 


    jaxbObject - An instance that is reachable from a prior call to a bind or update method that returned a JAXB object tree. 

    Returns: null if the specified JAXB object is not known to this {@link Binder}, or if it is not associated with an XML element. 

*javax.xml.bind.Binder.marshal(Object,XmlNode)*

public abstract void marshal(
  java.lang.Object jaxbObject,
  XmlNode xmlNode)
  throws |javax.xml.bind.JAXBException|
         
Marshal a JAXB object tree to a new XML document. 

This method is similar to (|javax.xml.bind.Marshaller|) with the addition of maintaining the association between JAXB objects 
and the produced XML nodes, enabling future update operations such as (|javax.xml.bind.Binder|) or (|javax.xml.bind.Binder|) . 

When (|javax.xml.bind.Binder|) is non-null, the marshalled xml content is validated during this operation. 


    jaxbObject - The content tree to be marshalled. 
    xmlNode - The parameter must be a Node that accepts children. 

*javax.xml.bind.Binder.setEventHandler(ValidationEventHandler)*

public abstract void setEventHandler(javax.xml.bind.ValidationEventHandler handler)
  throws |javax.xml.bind.JAXBException|
         
Allow an application to register a ValidationEventHandler. 

The ValidationEventHandler will be called by the JAXB Provider if any validation errors are encountered during calls to any of 
the Binder unmarshal, marshal and update methods. 

Calling this method with a null parameter will cause the Binder to revert back to the default default event handler. 


    handler - the validation event handler 

*javax.xml.bind.Binder.setProperty(String,Object)*

public abstract void setProperty(
  java.lang.String name,
  java.lang.Object value)
  throws |javax.xml.bind.PropertyException|
         
Set the particular property in the underlying implementation of Binder. This method can only be used to set one of the standard 
JAXB defined unmarshal/marshal properties or a provider specific property for binder, unmarshal or marshal. Attempting to set 
an undefined property will result in a PropertyException being thrown. See Supported Unmarshal Properties and Supported Marshal 
Properties. 


    name - the name of the property to be set. This value can either be specified using one of the constant fields or a user supplied 
       string. 
    value - the value of the property to be set 

*javax.xml.bind.Binder.setSchema(Schema)*

public abstract void setSchema(javax.xml.validation.Schema schema)

Specifies whether marshal, unmarshal and update methods performs validation on their XML content. 


    schema - set to null to disable validation. 

*javax.xml.bind.Binder.unmarshal(XmlNode)*

public abstract |java.lang.Object| unmarshal(XmlNode xmlNode)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML infoset view to a JAXB object tree. 

This method is similar to (|javax.xml.bind.Unmarshaller|) with the addition of maintaining the association between XML nodes 
and the produced JAXB objects, enabling future update operations, (|javax.xml.bind.Binder|) or (|javax.xml.bind.Binder|) . 

When (|javax.xml.bind.Binder|) is non-null, xmlNode and its descendants is validated during this operation. 

This method throws (|javax.xml.bind.UnmarshalException|) when the Binder's (|javax.xml.bind.JAXBContext|) does not have a 
mapping for the XML element name or the type, specifiable via @xsi:type, of xmlNode to a JAXB mapped class. The method 
(|javax.xml.bind.Binder|) enables an application to specify the JAXB mapped class that the xmlNode should be mapped to. 


    xmlNode - the document/element to unmarshal XML data from. 

    Returns: the newly created root object of the JAXB object tree. 

*javax.xml.bind.Binder.unmarshal(XmlNode,Class<T>)*

public abstract |javax.xml.bind.JAXBElement|<T> unmarshal(
  XmlNode xmlNode,
  java.lang.Class<T> declaredType)
  throws |javax.xml.bind.JAXBException|
         
Unmarshal XML root element by provided declaredType to a JAXB object tree. 

Implements Unmarshal by Declared Type 

This method is similar to (|javax.xml.bind.Unmarshaller|) with the addition of maintaining the association between XML nodes 
and the produced JAXB objects, enabling future update operations, (|javax.xml.bind.Binder|) or (|javax.xml.bind.Binder|) . 

When (|javax.xml.bind.Binder|) is non-null, xmlNode and its descendants is validated during this operation. 


    xmlNode - the document/element to unmarshal XML data from. 
    declaredType - appropriate JAXB mapped class to hold node's XML data. 

    Returns: JAXB Element representation of node 

*javax.xml.bind.Binder.updateJAXB(XmlNode)*

public abstract |java.lang.Object| updateJAXB(XmlNode xmlNode)
  throws |javax.xml.bind.JAXBException|
         
Takes an XML node and updates its associated JAXB object and its descendants. 

This operation can be thought of as an "in-place" unmarshalling. The difference is that instead of creating a whole new JAXB 
tree, this operation updates an existing tree, reusing as much JAXB objects as possible. 

As a side-effect, this operation updates the association between XML nodes and JAXB objects. 



    Returns: Returns the updated JAXB object. Typically, this is the same object that was returned from earlier {@link 
             #marshal(Object,Object)} or {@link #updateJAXB(Object)} method invocation, but it maybe a different object, for 
             example when the name of the XML element has changed. 

*javax.xml.bind.Binder.updateXML(Object)*

public abstract |XmlNode| updateXML(java.lang.Object jaxbObject)
  throws |javax.xml.bind.JAXBException|
         
Takes an JAXB object and updates its associated XML node and its descendants. 

This is a convenience method of: 

updateXML( jaxbObject, getXMLNode(jaxbObject)); 



*javax.xml.bind.Binder.updateXML(Object,XmlNode)*

public abstract |XmlNode| updateXML(
  java.lang.Object jaxbObject,
  XmlNode xmlNode)
  throws |javax.xml.bind.JAXBException|
         
Changes in JAXB object tree are updated in its associated XML parse tree. 

This operation can be thought of as an "in-place" marshalling. The difference is that instead of creating a whole new XML tree, 
this operation updates an existing tree while trying to preserve the XML as much as possible. 

For example, unknown elements/attributes in XML that were not bound to JAXB will be left untouched (whereas a marshalling 
operation would create a new tree that doesn't contain any of those.) 

As a side-effect, this operation updates the association between XML nodes and JAXB objects. 


    jaxbObject - root of potentially modified JAXB object tree 
    xmlNode - root of update target XML parse tree 

    Returns: Returns the updated XML node. Typically, this is the same node you passed in as xmlNode, but it maybe a different object, for 
             example when the tag name of the object has changed. 


