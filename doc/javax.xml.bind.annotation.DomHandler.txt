*javax.xml.bind.annotation.DomHandler* *DomHandler* Converts an element (and its descendants)
 from/to DOM (or similar) represen

public interface interface DomHandler<ElementT,ResultT extends javax.xml.transform.Result>


|javax.xml.bind.annotation.DomHandler_Description|
|javax.xml.bind.annotation.DomHandler_Fields|
|javax.xml.bind.annotation.DomHandler_Constructors|
|javax.xml.bind.annotation.DomHandler_Methods|

================================================================================================================================

*javax.xml.bind.annotation.DomHandler_Methods*
|javax.xml.bind.annotation.DomHandler.createUnmarshaller(ValidationEventHandler)|When a JAXB provider needs to unmarshal a part
|javax.xml.bind.annotation.DomHandler.getElement(ResultT)|Once the portion is sent to theResult.
|javax.xml.bind.annotation.DomHandler.marshal(ElementT,ValidationEventHandler)|This method is called when a JAXB provider needs

*javax.xml.bind.annotation.DomHandler_Description*

Converts an element (and its descendants) from/to DOM (or similar) representation. 

Implementations of this interface will be used in conjunction with (|javax.xml.bind.annotation.XmlAnyElement|) annotation to 
map an element of XML into a representation of infoset such as W3C DOM. 

Implementations hide how a portion of XML is converted into/from such DOM-like representation, allowing JAXB providers to work 
with arbitrary such library. 

This interface is intended to be implemented by library writers and consumed by JAXB providers. None of those methods are 
intended to be called from applications. 



*javax.xml.bind.annotation.DomHandler.createUnmarshaller(ValidationEventHandler)*

public |ResultT| createUnmarshaller(javax.xml.bind.ValidationEventHandler errorHandler)

When a JAXB provider needs to unmarshal a part of a document into an infoset representation, it first calls this method to 
create a (|javax.xml.transform.Result|) object. 

A JAXB provider will then send a portion of the XML into the given result. Such a portion always form a subtree of the whole 
XML document rooted at an element. 


    errorHandler - if any error happens between the invocation of this method and the invocation of {@link #getElement(Result)}, they must be 
       reported to this handler. 

The caller must provide a non-null error handler. 

The {@link Result} object created from this method may hold a reference to this error handler. 

    Returns: null if the operation fails. The error must have been reported to the error handler. 

*javax.xml.bind.annotation.DomHandler.getElement(ResultT)*

public |ElementT| getElement(ResultT extends javax.xml.transform.Result rt)

Once the portion is sent to the (|javax.xml.transform.Result|) . This method is called by a JAXB provider to obtain the 
unmarshalled element representation. 

Multiple invocations of this method may return different objects. This method can be invoked only when the whole sub-tree are 
fed to the (|javax.xml.transform.Result|) object. 


    rt - The {@link Result} object created by {@link #createUnmarshaller(ValidationEventHandler)}. 

    Returns: null if the operation fails. The error must have been reported to the error handler. 

*javax.xml.bind.annotation.DomHandler.marshal(ElementT,ValidationEventHandler)*

public |javax.xml.transform.Source| marshal(
  ElementT n,
  javax.xml.bind.ValidationEventHandler errorHandler)

This method is called when a JAXB provider needs to marshal an element to XML. 

If non-null, the returned (|javax.xml.transform.Source|) must contain a whole document rooted at one element, which will then 
be weaved into a bigger document that the JAXB provider is marshalling. 


    errorHandler - Receives any errors happened during the process of converting an element into a {@link Source}. 

The caller must provide a non-null error handler. 

    Returns: null if there was an error. The error should have been reported to the handler. 


