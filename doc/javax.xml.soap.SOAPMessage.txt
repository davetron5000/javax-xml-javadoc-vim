*javax.xml.soap.SOAPMessage* *SOAPMessage* The root class for all SOAP messages.

public abstract class SOAPMessage
  extends    |java.lang.Object|

|javax.xml.soap.SOAPMessage_Description|
|javax.xml.soap.SOAPMessage_Fields|
|javax.xml.soap.SOAPMessage_Constructors|
|javax.xml.soap.SOAPMessage_Methods|

================================================================================================================================

*javax.xml.soap.SOAPMessage_Fields*
|java.lang.String_javax.xml.soap.SOAPMessage.CHARACTER_SET_ENCODING|
|java.lang.String_javax.xml.soap.SOAPMessage.WRITE_XML_DECLARATION|

*javax.xml.soap.SOAPMessage_Constructors*
|javax.xml.soap.SOAPMessage()|

*javax.xml.soap.SOAPMessage_Methods*
|javax.xml.soap.SOAPMessage.addAttachmentPart(AttachmentPart)|Adds the given AttachmentPart object to this SOAPMessage  object.
|javax.xml.soap.SOAPMessage.countAttachments()|Gets a count of the number of attachments in this message.
|javax.xml.soap.SOAPMessage.createAttachmentPart()|Creates a new empty AttachmentPart object.
|javax.xml.soap.SOAPMessage.createAttachmentPart(DataHandler)|Creates an AttachmentPart object and populates it using  the give
|javax.xml.soap.SOAPMessage.createAttachmentPart(Object,String)|Creates an AttachmentPart object and populates it with  the spe
|javax.xml.soap.SOAPMessage.getAttachment(SOAPElement)|Returns an AttachmentPart object that is associated with an  attachment 
|javax.xml.soap.SOAPMessage.getAttachments()|Retrieves all the AttachmentPart objects that are part of  this SOAPMessage object
|javax.xml.soap.SOAPMessage.getAttachments(MimeHeaders)|Retrieves all the AttachmentPart objects that have header  entries that
|javax.xml.soap.SOAPMessage.getContentDescription()|Retrieves a description of this SOAPMessage object's  content.
|javax.xml.soap.SOAPMessage.getMimeHeaders()|Returns all the transport-specific MIME headers for this SOAPMessage  object in a 
|javax.xml.soap.SOAPMessage.getProperty(String)|Retrieves value of the specified property.
|javax.xml.soap.SOAPMessage.getSOAPBody()|Gets the SOAP Body contained in this SOAPMessage object.
|javax.xml.soap.SOAPMessage.getSOAPHeader()|Gets the SOAP Header contained in this SOAPMessage  object.
|javax.xml.soap.SOAPMessage.getSOAPPart()|Gets the SOAP part of this SOAPMessage object.
|javax.xml.soap.SOAPMessage.removeAllAttachments()|Removes all AttachmentPart objects that have been added  to this SOAPMessage
|javax.xml.soap.SOAPMessage.removeAttachments(MimeHeaders)|Removes all the AttachmentPart objects that have header  entries tha
|javax.xml.soap.SOAPMessage.saveChanges()|Updates this SOAPMessage object with all the changes that  have been made to it.
|javax.xml.soap.SOAPMessage.saveRequired()|Indicates whether this SOAPMessage object needs to have  the method saveChanges call
|javax.xml.soap.SOAPMessage.setContentDescription(String)|Sets the description of this SOAPMessage object's  content with the g
|javax.xml.soap.SOAPMessage.setProperty(String,Object)|Associates the specified value with the specified property.
|javax.xml.soap.SOAPMessage.writeTo(OutputStream)|Writes this SOAPMessage object to the given output  stream.

*javax.xml.soap.SOAPMessage_Description*

The root class for all SOAP messages. As transmitted on the "wire", a SOAP message is an XML document or a MIME message whose 
first body part is an XML/SOAP document. 

A SOAPMessage object consists of a SOAP part and optionally one or more attachment parts. The SOAP part for a SOAPMessage 
object is a SOAPPart object, which contains information used for message routing and identification, and which can contain 
application-specific content. All data in the SOAP Part of a message must be in XML format. 

A new SOAPMessage object contains the following by default: 

A SOAPPart object A SOAPEnvelope object A SOAPBody object A SOAPHeader object 

The SOAP part of a message can be retrieved by calling the method SOAPMessage.getSOAPPart(). The SOAPEnvelope object is 
retrieved from the SOAPPart object, and the SOAPEnvelope object is used to retrieve the SOAPBody and SOAPHeader objects. 



SOAPPart sp = message.getSOAPPart(); SOAPEnvelope se = sp.getEnvelope(); SOAPBody sb = se.getBody(); SOAPHeader sh = 
se.getHeader(); 

In addition to the mandatory SOAPPart object, a SOAPMessage object may contain zero or more AttachmentPart objects, each of 
which contains application-specific data. The SOAPMessage interface provides methods for creating AttachmentPart objects and 
also for adding them to a SOAPMessage object. A party that has received a SOAPMessage object can examine its contents by 
retrieving individual attachment parts. 

Unlike the rest of a SOAP message, an attachment is not required to be in XML format and can therefore be anything from simple 
text to an image file. Consequently, any message content that is not in XML format must be in an AttachmentPart object. 

A MessageFactory object may create SOAPMessage objects with behavior that is specialized to a particular implementation or 
application of SAAJ. For instance, a MessageFactory object may produce SOAPMessage objects that conform to a particular Profile 
such as ebXML. In this case a MessageFactory object might produce SOAPMessage objects that are initialized with ebXML headers. 

In order to ensure backward source compatibility, methods that are added to this class after version 1.1 of the SAAJ 
specification are all concrete instead of abstract and they all have default implementations. Unless otherwise noted in the 
JavaDocs for those methods the default implementations simply throw an UnsupportedOperationException and the SAAJ 
implementation code must override them with methods that provide the specified behavior. Legacy client code does not have this 
restriction, however, so long as there is no claim made that it conforms to some later version of the specification than it was 
originally written for. A legacy class that extends the SOAPMessage class can be compiled and/or run against succeeding 
versions of the SAAJ API without modification. If such a class was correctly implemented then it will continue to behave 
correctly relative to the version of the specification against which it was written. 



*java.lang.String_javax.xml.soap.SOAPMessage.CHARACTER_SET_ENCODING*

Specifies the character type encoding for the SOAP Message. Valid values include "utf-8" and "utf-16". See vendor documentation 
for additional supported values. The default is "utf-8". 


*java.lang.String_javax.xml.soap.SOAPMessage.WRITE_XML_DECLARATION*

Specifies whether the SOAP Message will contain an XML declaration when it is sent. The only valid values are "true" and 
"false". The default is "false". 



*javax.xml.soap.SOAPMessage()*

public SOAPMessage()




*javax.xml.soap.SOAPMessage.addAttachmentPart(AttachmentPart)*

public abstract void addAttachmentPart(javax.xml.soap.AttachmentPart AttachmentPart)

Adds the given AttachmentPart object to this SOAPMessage object. An AttachmentPart object must be created before it can be 
added to a message. 


    AttachmentPart - an AttachmentPart object that is to become part of this SOAPMessage object 

*javax.xml.soap.SOAPMessage.countAttachments()*

public abstract int countAttachments()

Gets a count of the number of attachments in this message. This count does not include the SOAP part. 



    Returns: the number of AttachmentPart objects that are part of this SOAPMessage object 

*javax.xml.soap.SOAPMessage.createAttachmentPart()*

public abstract |javax.xml.soap.AttachmentPart| createAttachmentPart()

Creates a new empty AttachmentPart object. Note that the method addAttachmentPart must be called with this new AttachmentPart 
object as the parameter in order for it to become an attachment to this SOAPMessage object. 



    Returns: a new AttachmentPart object that can be populated and added to this SOAPMessage object 

*javax.xml.soap.SOAPMessage.createAttachmentPart(DataHandler)*

public |javax.xml.soap.AttachmentPart| createAttachmentPart(javax.activation.DataHandler dataHandler)

Creates an AttachmentPart object and populates it using the given DataHandler object. 


    dataHandler - the javax.activation.DataHandler object that will generate the content for this SOAPMessage object 

    Returns: a new AttachmentPart object that contains data generated by the given DataHandler object 

*javax.xml.soap.SOAPMessage.createAttachmentPart(Object,String)*

public |javax.xml.soap.AttachmentPart| createAttachmentPart(
  java.lang.Object content,
  java.lang.String contentType)

Creates an AttachmentPart object and populates it with the specified data of the specified content type. The type of the Object 
should correspond to the value given for the Content-Type. 


    content - an Object containing the content for the AttachmentPart object to be created 
    contentType - a String object giving the type of content; examples are "text/xml", "text/plain", and "image/jpeg" 

    Returns: a new AttachmentPart object that contains the given data 

*javax.xml.soap.SOAPMessage.getAttachment(SOAPElement)*

public abstract |javax.xml.soap.AttachmentPart| getAttachment(javax.xml.soap.SOAPElement element)
  throws |javax.xml.soap.SOAPException|
         
Returns an AttachmentPart object that is associated with an attachment that is referenced by this SOAPElement or null if no 
such attachment exists. References can be made via an href attribute as described in (|null|) , or via a single Text child node 
containing a URI as described in the WS-I Attachments Profile 1.0 for elements of schema type ref:swaRef( (|null|) ). These two 
mechanisms must be supported. The support for references via href attribute also implies that this method should also be 
supported on an element that is an xop:Include element ( (|null|) ). other reference mechanisms may be supported by individual 
implementations of this standard. Contact your vendor for details. 


    element - The SOAPElement containing the reference to an Attachment 

    Returns: the referenced AttachmentPart or null if no such AttachmentPart exists or no reference can be found in this SOAPElement. 

*javax.xml.soap.SOAPMessage.getAttachments()*

public abstract |java.util.Iterator| getAttachments()

Retrieves all the AttachmentPart objects that are part of this SOAPMessage object. 



    Returns: an iterator over all the attachments in this message 

*javax.xml.soap.SOAPMessage.getAttachments(MimeHeaders)*

public abstract |java.util.Iterator| getAttachments(javax.xml.soap.MimeHeaders headers)

Retrieves all the AttachmentPart objects that have header entries that match the specified headers. Note that a returned 
attachment could have headers in addition to those specified. 


    headers - a MimeHeaders object containing the MIME headers for which to search 

    Returns: an iterator over all attachments that have a header that matches one of the given headers 

*javax.xml.soap.SOAPMessage.getContentDescription()*

public abstract |java.lang.String| getContentDescription()

Retrieves a description of this SOAPMessage object's content. 



    Returns: a String describing the content of this message or null if no description has been set 

*javax.xml.soap.SOAPMessage.getMimeHeaders()*

public abstract |javax.xml.soap.MimeHeaders| getMimeHeaders()

Returns all the transport-specific MIME headers for this SOAPMessage object in a transport-independent fashion. 



    Returns: a MimeHeaders object containing the MimeHeader objects 

*javax.xml.soap.SOAPMessage.getProperty(String)*

public |java.lang.Object| getProperty(java.lang.String property)
  throws |javax.xml.soap.SOAPException|
         
Retrieves value of the specified property. 


    property - the name of the property to retrieve 

    Returns: the value associated with the named property or null if no such property exists. 

*javax.xml.soap.SOAPMessage.getSOAPBody()*

public |javax.xml.soap.SOAPBody| getSOAPBody()
  throws |javax.xml.soap.SOAPException|
         
Gets the SOAP Body contained in this SOAPMessage object. 



    Returns: the SOAPBody object contained by this SOAPMessage object 

*javax.xml.soap.SOAPMessage.getSOAPHeader()*

public |javax.xml.soap.SOAPHeader| getSOAPHeader()
  throws |javax.xml.soap.SOAPException|
         
Gets the SOAP Header contained in this SOAPMessage object. 



    Returns: the SOAPHeader object contained by this SOAPMessage object 

*javax.xml.soap.SOAPMessage.getSOAPPart()*

public abstract |javax.xml.soap.SOAPPart| getSOAPPart()

Gets the SOAP part of this SOAPMessage object. 

SOAPMessage object contains one or more attachments, the SOAP Part must be the first MIME body part in the message. 



    Returns: the SOAPPart object for this SOAPMessage object 

*javax.xml.soap.SOAPMessage.removeAllAttachments()*

public abstract void removeAllAttachments()

Removes all AttachmentPart objects that have been added to this SOAPMessage object. 

This method does not touch the SOAP part. 



*javax.xml.soap.SOAPMessage.removeAttachments(MimeHeaders)*

public abstract void removeAttachments(javax.xml.soap.MimeHeaders headers)

Removes all the AttachmentPart objects that have header entries that match the specified headers. Note that the removed 
attachment could have headers in addition to those specified. 


    headers - a MimeHeaders object containing the MIME headers for which to search 

*javax.xml.soap.SOAPMessage.saveChanges()*

public abstract void saveChanges()
  throws |javax.xml.soap.SOAPException|
         
Updates this SOAPMessage object with all the changes that have been made to it. This method is called automatically when 
(|javax.xml.soap.SOAPMessage|) is called. However, if changes are made to a message that was received or to one that has 
already been sent, the method saveChanges needs to be called explicitly in order to save the changes. The method saveChanges 
also generates any changes that can be read back (for example, a MessageId in profiles that support a message id). All MIME 
headers in a message that is created for sending purposes are guaranteed to have valid values only after saveChanges has been 
called. 

In addition, this method marks the point at which the data from all constituent AttachmentPart objects are pulled into the 
message. 



*javax.xml.soap.SOAPMessage.saveRequired()*

public abstract boolean saveRequired()

Indicates whether this SOAPMessage object needs to have the method saveChanges called on it. 



    Returns: true if saveChanges needs to be called; false otherwise. 

*javax.xml.soap.SOAPMessage.setContentDescription(String)*

public abstract void setContentDescription(java.lang.String description)

Sets the description of this SOAPMessage object's content with the given description. 


    description - a String describing the content of this message 

*javax.xml.soap.SOAPMessage.setProperty(String,Object)*

public void setProperty(
  java.lang.String property,
  java.lang.Object value)
  throws |javax.xml.soap.SOAPException|
         
Associates the specified value with the specified property. If there was already a value associated with this property, the old 
value is replaced. 

The valid property names include (|javax.xml.soap.SOAPMessage|) and (|javax.xml.soap.SOAPMessage|) . All of these standard SAAJ 
properties are prefixed by "javax.xml.soap". Vendors may also add implementation specific properties. These properties must be 
prefixed with package names that are unique to the vendor. 

Setting the property WRITE_XML_DECLARATION to "true" will cause an XML Declaration to be written out at the start of the SOAP 
message. The default value of "false" suppresses this declaration. 

The property CHARACTER_SET_ENCODING defaults to the value "utf-8" which causes the SOAP message to be encoded using UTF-8. 
Setting CHARACTER_SET_ENCODING to "utf-16" causes the SOAP message to be encoded using UTF-16. 

Some implementations may allow encodings in addition to UTF-8 and UTF-16. Refer to your vendor's documentation for details. 


    property - the property with which the specified value is to be associated. 
    value - the value to be associated with the specified property 

*javax.xml.soap.SOAPMessage.writeTo(OutputStream)*

public abstract void writeTo(java.io.OutputStream out)
  throws |java.io.IOException|
         |javax.xml.soap.SOAPException|
         
Writes this SOAPMessage object to the given output stream. The externalization format is as defined by the SOAP 1.1 with 
Attachments specification. 

If there are no attachments, just an XML stream is written out. For those messages that have attachments, writeTo writes a 
MIME-encoded byte stream. 

Note that this method does not write the transport-specific MIME Headers of the Message 


    out - the OutputStream object to which this SOAPMessage object will be written 


