*javax.xml.ws.LogicalMessage* *LogicalMessage* The LogicalMessage interface represents a
  protocol agnostic XML message and con

public interface interface LogicalMessage


|javax.xml.ws.LogicalMessage_Description|
|javax.xml.ws.LogicalMessage_Fields|
|javax.xml.ws.LogicalMessage_Constructors|
|javax.xml.ws.LogicalMessage_Methods|

================================================================================================================================

*javax.xml.ws.LogicalMessage_Methods*
|javax.xml.ws.LogicalMessage.getPayload()|Gets the message payload as an XML source, may be called   multiple times on the same
|javax.xml.ws.LogicalMessage.getPayload(JAXBContext)|Gets the message payload as a JAXB object.
|javax.xml.ws.LogicalMessage.setPayload(Object,JAXBContext)|Sets the message payload
|javax.xml.ws.LogicalMessage.setPayload(Source)|Sets the message payload

*javax.xml.ws.LogicalMessage_Description*

The LogicalMessage interface represents a protocol agnostic XML message and contains methods that provide access to the payload 
of the message. 



*javax.xml.ws.LogicalMessage.getPayload()*

public |javax.xml.transform.Source| getPayload()

Gets the message payload as an XML source, may be called multiple times on the same LogicalMessage instance, always returns a 
new Source that may be used to retrieve the entire message payload. 

If the returned Source is an instance of DOMSource, then modifications to the encapsulated DOM tree change the message payload 
in-place, there is no need to susequently call setPayload. Other types of Source provide only read access to the message 
payload. 



    Returns: The contained message payload; returns null if no payload is present in this message. 

*javax.xml.ws.LogicalMessage.getPayload(JAXBContext)*

public |java.lang.Object| getPayload(javax.xml.bind.JAXBContext context)

Gets the message payload as a JAXB object. Note that there is no connection between the returned object and the message 
payload, changes to the payload require calling setPayload. 


    context - The JAXBContext that should be used to unmarshall the message payload 

    Returns: The contained message payload; returns null if no payload is present in this message 

*javax.xml.ws.LogicalMessage.setPayload(Object,JAXBContext)*

public void setPayload(
  java.lang.Object payload,
  javax.xml.bind.JAXBContext context)

Sets the message payload 


    payload - message payload 
    context - The JAXBContext that should be used to marshall the payload 

*javax.xml.ws.LogicalMessage.setPayload(Source)*

public void setPayload(javax.xml.transform.Source payload)

Sets the message payload 


    payload - message payload 


